(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("Debugger", [], factory);
	else if(typeof exports === 'object')
		exports["Debugger"] = factory();
	else
		root["Debugger"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 37);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("debug");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/object/entries");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = __webpack_require__(3);

var _extends3 = _interopRequireDefault(_extends2);

var _entries = __webpack_require__(1);

var _entries2 = _interopRequireDefault(_entries);

var _assign = __webpack_require__(4);

var _assign2 = _interopRequireDefault(_assign);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _reselectTree = __webpack_require__(9);

var _selectors = __webpack_require__(19);

var _selectors2 = _interopRequireDefault(_selectors);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const debug = (0, _debug2.default)("debugger:evm:selectors");

const WORD_SIZE = 0x20;

/**
 * create EVM-level selectors for a given trace step selector
 * may specify additional selectors to include
 */
function createStepSelectors(step, state = null) {
  let base = {
    /**
     * .trace
     *
     * trace step info related to operation
     */
    trace: (0, _reselectTree.createLeaf)([step], ({ gasCost, op, pc }) => ({ gasCost, op, pc })),

    /**
     * .programCounter
     */
    programCounter: (0, _reselectTree.createLeaf)(["./trace"], step => step.pc),

    /**
     * .isJump
     */
    isJump: (0, _reselectTree.createLeaf)(["./trace"], step => step.op != "JUMPDEST" && step.op.indexOf("JUMP") == 0),

    /**
     * .isCall
     *
     * whether the opcode will switch to another calling context
     */
    isCall: (0, _reselectTree.createLeaf)(["./trace"], step => step.op == "CALL" || step.op == "DELEGATECALL"),

    /**
     * .isCreate
     */
    isCreate: (0, _reselectTree.createLeaf)(["./trace"], step => step.op == "CREATE"),

    /**
     * .isHalting
     *
     * whether the instruction halts or returns from a calling context
     */
    isHalting: (0, _reselectTree.createLeaf)(["./trace"], step => step.op == "STOP" || step.op == "RETURN")
  };

  if (state) {
    const isRelative = path => typeof path == "string" && (path.startsWith("./") || path.startsWith("../"));

    if (isRelative(state)) {
      state = `../${state}`;
    }

    (0, _assign2.default)(base, {
      /**
       * .callAddress
       *
       * address transferred to by call operation
       */
      callAddress: (0, _reselectTree.createLeaf)(["./isCall", "./trace", state], (matches, step, { stack }) => {
        if (!matches) return null;

        let address = stack[stack.length - 2];
        address = "0x" + address.substring(24);
        return address;
      }),

      /**
       * .createBinary
       *
       * binary code to execute via create operation
       */
      createBinary: (0, _reselectTree.createLeaf)(["./isCreate", "./trace", state], (matches, step, { stack, memory }) => {
        if (!matches) return null;

        // Get the code that's going to be created from memory.
        // Note we multiply by 2 because these offsets are in bytes.
        const offset = parseInt(stack[stack.length - 2], 16) * 2;
        const length = parseInt(stack[stack.length - 3], 16) * 2;

        return "0x" + memory.join("").substring(offset, offset + length);
      })
    });
  }

  return base;
}

const evm = (0, _reselectTree.createSelectorTree)({
  /**
   * evm.state
   */
  state: state => state.evm,

  /**
   * evm.info
   */
  info: {
    /**
     * evm.info.contexts
     */
    contexts: (0, _reselectTree.createLeaf)(['/state'], state => state.info.contexts.byContext),

    /**
     * evm.info.instances
     */
    instances: (0, _reselectTree.createLeaf)(['/state'], state => state.info.instances.byAddress),

    /**
     * evm.info.binaries
     */
    binaries: {
      _: (0, _reselectTree.createLeaf)(['/state'], state => state.info.contexts.byBinary),

      /**
       * evm.info.binaries.search
       *
       * returns function (binary) => context
       */
      search: (0, _reselectTree.createLeaf)(['./_'], binaries => {
        // HACK ignore link references for search
        // link references come in two forms: with underscores or all zeroes
        // the underscore format is used by Truffle to reference links by name
        // zeroes are used by solc directly, as libraries inject their own
        // address at CREATE-time
        const toRegExp = binary => new RegExp(`^${binary.replace(/__.{38}|0{40}/g, ".{40}")}`);

        let matchers = (0, _entries2.default)(binaries).map(([binary, { context }]) => ({
          context,
          regex: toRegExp(binary)
        }));

        return binary => matchers.filter(({ context, regex }) => binary.match(regex)).map(({ context }) => ({ context }))[0] || null;
      })
    }
  },

  /**
   * evm.current
   */
  current: {

    /**
     * evm.current.callstack
     */
    callstack: state => state.evm.proc.callstack,

    /**
     * evm.current.call
     */
    call: (0, _reselectTree.createLeaf)(["./callstack"], stack => stack.length ? stack[stack.length - 1] : {}),

    /**
     * evm.current.context
     */
    context: (0, _reselectTree.createLeaf)(["./call", "/info/instances", "/info/binaries/search", "/info/contexts"], ({ address, binary }, instances, search, contexts) => {
      let record;
      if (address) {
        record = instances[address];
        binary = record.binary;
      } else {
        record = search(binary);
      }

      let context = contexts[(record || {}).context];

      return (0, _extends3.default)({}, context, {
        binary
      });
    }),

    /**
     * evm.current.state
     *
     * evm state info: as of last operation, before op defined in step
     */
    state: (0, _assign2.default)({}, ...["depth", "error", "gas", "memory", "stack", "storage"].map(param => ({
      [param]: (0, _reselectTree.createLeaf)([_selectors2.default.step], step => step[param])
    }))),

    /**
     * evm.current.step
     */
    step: createStepSelectors(_selectors2.default.step, "./state")
  },

  /**
   * evm.next
   */
  next: {

    /**
     * evm.next.state
     *
     * evm state as a result of next step operation
     */
    state: (0, _assign2.default)({}, ...["depth", "error", "gas", "memory", "stack", "storage"].map(param => ({
      [param]: (0, _reselectTree.createLeaf)([_selectors2.default.next], step => step[param])
    }))),

    step: createStepSelectors(_selectors2.default.next, "./state")
  }
});

exports.default = evm;

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/helpers/extends");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/object/assign");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prefixName = prefixName;
exports.keccak256 = keccak256;

var _utils = __webpack_require__(11);

function prefixName(prefix, fn) {
  Object.defineProperty(fn, 'name', {
    value: `${prefix}.${fn.name}`,
    configurable: true
  });

  return fn;
}

/**
 * @return 0x-prefix string of keccak256 hash
 */
function keccak256(...args) {
  return (0, _utils.toHexString)((0, _utils.keccak256)(...args));
}

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = __webpack_require__(3);

var _extends3 = _interopRequireDefault(_extends2);

var _entries = __webpack_require__(1);

var _entries2 = _interopRequireDefault(_entries);

var _assign = __webpack_require__(4);

var _assign2 = _interopRequireDefault(_assign);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _reselectTree = __webpack_require__(9);

var _truffleSolidityUtils = __webpack_require__(50);

var _truffleSolidityUtils2 = _interopRequireDefault(_truffleSolidityUtils);

var _truffleCodeUtils = __webpack_require__(51);

var _truffleCodeUtils2 = _interopRequireDefault(_truffleCodeUtils);

var _selectors = __webpack_require__(2);

var _selectors2 = _interopRequireDefault(_selectors);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const debug = (0, _debug2.default)("debugger:solidity:selectors");

function getSourceRange(instruction = {}) {
  return {
    start: instruction.start || 0,
    length: instruction.length || 0,
    lines: instruction.range || {
      start: {
        line: 0, column: 0
      },
      end: {
        line: 0, column: 0
      }
    }
  };
}

let solidity = (0, _reselectTree.createSelectorTree)({
  /**
   * solidity.state
   */
  state: state => state.solidity,

  /**
   * solidity.info
   */
  info: {
    /**
     * solidity.info.sources
     */
    sources: (0, _reselectTree.createLeaf)(['/state'], state => state.info.sources.byId),

    /**
     * solidity.info.sourceMaps
     */
    sourceMaps: (0, _reselectTree.createLeaf)(['/state'], state => state.info.sourceMaps.byContext)
  },

  /**
   * solidity.current
   */
  current: {

    /**
     * solidity.current.sourceMap
     */
    sourceMap: (0, _reselectTree.createLeaf)([_selectors2.default.current.context, "/info/sourceMaps"], ({ context }, sourceMaps) => sourceMaps[context] || {}),

    /**
     * solidity.current.functionDepth
     */
    functionDepth: state => state.solidity.proc.functionDepth,

    /**
     * solidity.current.instructions
     */
    instructions: (0, _reselectTree.createLeaf)(["/info/sources", _selectors2.default.current.context, "./sourceMap"], (sources, { binary }, { sourceMap }) => {
      let instructions = _truffleCodeUtils2.default.parseCode(binary);

      if (!sourceMap) {
        // Let's create a source map to use since none exists. This source map
        // maps just as many ranges as there are instructions, and ensures every
        // instruction is marked as "jumping out". This will ensure all
        // available debugger commands step one instruction at a time.
        //
        // This is kindof a hack; perhaps this should be broken out into separate
        // context types. TODO
        sourceMap = "";
        for (var i = 0; i < instructions.length; i++) {
          sourceMap += i + ":" + i + ":1:-1;";
        }
      }

      var lineAndColumnMappings = (0, _assign2.default)({}, ...(0, _entries2.default)(sources).map(([id, { source }]) => ({
        [id]: _truffleSolidityUtils2.default.getCharacterOffsetToLineAndColumnMapping(source || "")
      })));
      var humanReadableSourceMap = _truffleSolidityUtils2.default.getHumanReadableSourceMap(sourceMap);

      let primaryFile = humanReadableSourceMap[0].file;
      debug("primaryFile %o", primaryFile);

      return instructions.map((instruction, index) => {
        // lookup source map by index and add `index` property to
        // instruction
        //

        const sourceMap = humanReadableSourceMap[index] || {};

        return {
          instruction: (0, _extends3.default)({}, instruction, { index }),
          sourceMap
        };
      }).map(({ instruction, sourceMap }) => {
        // add source map information to instruction, or defaults
        //

        const { jump, start = 0, length = 0, file = primaryFile } = sourceMap;
        const lineAndColumnMapping = lineAndColumnMappings[file] || {};
        const range = {
          start: lineAndColumnMapping[start] || { line: null, column: null },
          end: lineAndColumnMapping[start + length] || { line: null, column: null }
        };

        if (range.start.line === null) {
          debug("sourceMap %o", sourceMap);
        }

        return (0, _extends3.default)({}, instruction, {

          jump,
          start,
          length,
          file,
          range
        });
      });
    }),

    /**
     * solidity.current.instructionAtProgramCounter
     */
    instructionAtProgramCounter: (0, _reselectTree.createLeaf)(["./instructions"], instructions => {
      let map = [];
      instructions.forEach(function (instruction) {
        map[instruction.pc] = instruction;
      });

      // fill in gaps in map by defaulting to the last known instruction
      let lastSeen = null;
      for (let [pc, instruction] of map.entries()) {
        if (instruction) {
          lastSeen = instruction;
        } else {
          map[pc] = lastSeen;
        }
      }
      return map;
    }),

    /**
     * solidity.current.instruction
     */
    instruction: (0, _reselectTree.createLeaf)(["./instructionAtProgramCounter", _selectors2.default.current.step.programCounter], (map, pc) => map[pc] || {}),

    /**
     * solidity.current.source
     */
    source: (0, _reselectTree.createLeaf)(["/info/sources", "./instruction"], (sources, { file: id }) => sources[id] || {}),

    /**
     * solidity.current.sourceRange
     */
    sourceRange: (0, _reselectTree.createLeaf)(["./instruction"], getSourceRange),

    /**
     * solidity.current.isSourceRangeFinal
     */
    isSourceRangeFinal: (0, _reselectTree.createLeaf)(["./instructionAtProgramCounter", _selectors2.default.current.step.programCounter, _selectors2.default.next.step.programCounter], (map, current, next) => {
      if (!map[next]) {
        return true;
      }

      current = map[current];
      next = map[next];

      return current.start != next.start || current.length != next.length || current.file != next.file;
    }),

    /**
     * solidity.current.isMultiline
     */
    isMultiline: (0, _reselectTree.createLeaf)(["./sourceRange"], ({ lines }) => lines.start.line != lines.end.line),

    /**
     * solidity.current.willJump
     */
    willJump: (0, _reselectTree.createLeaf)([_selectors2.default.current.step.isJump], isJump => isJump),

    /**
     * solidity.current.jumpDirection
     */
    jumpDirection: (0, _reselectTree.createLeaf)(["./instruction"], (i = {}) => i.jump || "-")
  }
});

exports.default = solidity;

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/helpers/asyncToGenerator");

/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = require("web3");

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = require("reselect-tree");

/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = require("redux-saga/effects");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MAX_WORD = exports.WORD_SIZE = undefined;

var _entries = __webpack_require__(1);

var _entries2 = _interopRequireDefault(_entries);

var _assign = __webpack_require__(4);

var _assign2 = _interopRequireDefault(_assign);

exports.cleanBigNumbers = cleanBigNumbers;
exports.typeIdentifier = typeIdentifier;
exports.typeClass = typeClass;
exports.allocateDeclarations = allocateDeclarations;
exports.specifiedSize = specifiedSize;
exports.storageSize = storageSize;
exports.isMapping = isMapping;
exports.isReference = isReference;
exports.referenceType = referenceType;
exports.baseDefinition = baseDefinition;
exports.toBigNumber = toBigNumber;
exports.toSignedBigNumber = toSignedBigNumber;
exports.toHexString = toHexString;
exports.toBytes = toBytes;
exports.keccak256 = keccak256;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _bignumber = __webpack_require__(20);

var _web = __webpack_require__(8);

var _web2 = _interopRequireDefault(_web);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const debug = (0, _debug2.default)("debugger:data:decode:utils");

const WORD_SIZE = exports.WORD_SIZE = 0x20;
const MAX_WORD = exports.MAX_WORD = new _bignumber.BigNumber(2).pow(256).minus(1);

/**
 * recursively converts big numbers into something nicer to look at
 */
function cleanBigNumbers(value) {
  if (_bignumber.BigNumber.isBigNumber(value)) {
    return value.toNumber();
  } else if (value && value.map != undefined) {
    return value.map(inner => cleanBigNumbers(inner));
  } else if (value && typeof value == "object") {
    return (0, _assign2.default)({}, ...(0, _entries2.default)(value).map(([key, inner]) => ({ [key]: cleanBigNumbers(inner) })));
  } else {
    return value;
  }
}

function typeIdentifier(definition) {
  return definition.typeDescriptions.typeIdentifier;
}

/**
 * returns basic type class for a variable definition node
 * e.g.:
 *  `t_uint256` becomes `uint`
 *  `t_struct$_Thing_$20_memory_ptr` becomes `struct`
 */
function typeClass(definition) {
  return typeIdentifier(definition).match(/t_([^$_0-9]+)/)[1];
}

/**
 * Allocate storage for given variable declarations
 *
 * Postcondition: starts a new slot and occupies whole slots
 */
function allocateDeclarations(declarations, refs, slot = 0, index = WORD_SIZE - 1, path = []) {
  if (index < WORD_SIZE - 1) {
    // starts a new slot
    slot++;
    index = WORD_SIZE - 1;
  }

  let parentFrom = { slot, index: 0 };
  var parentTo = { slot, index: WORD_SIZE - 1 };
  let mapping = {};

  for (let declaration of declarations) {
    let { from, to, next, children } = allocateDeclaration(declaration, refs, slot, index);

    mapping[declaration.id] = { from, to, name: declaration.name };
    if (children !== undefined) {
      mapping[declaration.id].children = children;
    }

    slot = next.slot;
    index = next.index;

    parentTo = { slot: to.slot, index: WORD_SIZE - 1 };
  }

  if (index < WORD_SIZE - 1) {
    slot++;
    index = WORD_SIZE - 1;
  }

  return {
    from: parentFrom,
    to: parentTo,
    next: { slot, index },
    children: mapping
  };
}

function allocateValue(slot, index, bytes) {
  let from = index - bytes + 1 >= 0 ? { slot, index: index - bytes + 1 } : { slot: slot + 1, index: WORD_SIZE - bytes };

  let to = { slot: from.slot, index: from.index + bytes - 1 };

  let next = from.index == 0 ? { slot: from.slot + 1, index: WORD_SIZE - 1 } : { slot: from.slot, index: from.index - 1 };

  return { from, to, next };
}

function allocateDeclaration(declaration, refs, slot, index) {
  let definition = refs[declaration.id].definition;
  var byteSize = storageSize(definition); // yum

  if (typeClass(definition) == "struct") {
    let struct = refs[definition.typeName.referencedDeclaration];
    debug("struct: %O", struct);

    let result = allocateDeclarations(struct.variables || [], refs, slot, index);
    debug("struct result %o", result);
    return result;
  }

  if (typeClass(definition) == "mapping") {}

  return allocateValue(slot, index, byteSize);
}

/**
 * e.g. uint48 -> 6
 * @return size in bytes for explicit type size, or `null` if not stated
 */
function specifiedSize(definition) {
  let specified = typeIdentifier(definition).match(/t_[a-z]+([0-9]+)/);

  if (!specified) {
    return null;
  }

  let num = specified[1];

  switch (typeClass(definition)) {
    case "int":
    case "uint":
      return num / 8;

    case "bytes":
      return num;

    default:
      debug("Unknown type for size specification: %s", typeIdentifier(definition));
  }
}

function storageSize(definition) {
  switch (typeClass(definition)) {
    case "bool":
      return 1;

    case "address":
      return 20;

    case "int":
    case "uint":
      // is this a HACK? ("256" / 8)
      return typeIdentifier(definition).match(/t_[a-z]+([0-9]+)/)[1] / 8;

    case "string":
    case "bytes":
    case "array":
      return WORD_SIZE;

    case "mapping":
      // HACK just to reserve slot. mappings have no size as such
      return WORD_SIZE;
  }
}

function isMapping(definition) {
  return typeIdentifier(definition).match(/^t_mapping/) != null;
}

function isReference(definition) {
  return typeIdentifier(definition).match(/_(memory|storage)(_ptr)?$/) != null;
}

function referenceType(definition) {
  return typeIdentifier(definition).match(/_([^_]+)(_ptr)?$/)[1];
}

function baseDefinition(definition) {
  let baseIdentifier = typeIdentifier(definition)
  // first dollar sign     last dollar sign
  //   `---------.       ,---'
  .match(/^[^$]+\$_(.+)_\$[^$]+$/)[1];
  //              `----' greedy match

  // HACK - internal types for memory or storage also seem to be pointers
  if (baseIdentifier.match(/_(memory|storage)$/) != null) {
    baseIdentifier = `${baseIdentifier}_ptr`;
  }

  // another HACK - we get away with it becausewe're only using that one property
  return {
    typeDescriptions: {
      typeIdentifier: baseIdentifier
    }
  };
}

function toBigNumber(bytes) {
  if (bytes == undefined) {
    return undefined;
  } else if (typeof bytes == "string") {
    return new _bignumber.BigNumber(bytes, 16);
  } else if (typeof bytes == "number" || _bignumber.BigNumber.isBigNumber(bytes)) {
    return new _bignumber.BigNumber(bytes);
  } else if (bytes.reduce) {
    return bytes.reduce((num, byte) => num.times(0x100).plus(byte), new _bignumber.BigNumber(0));
  }
}

function toSignedBigNumber(bytes) {
  if (bytes[0] < 0b10000000) {
    // first bit is 0
    return toBigNumber(bytes);
  } else {
    return toBigNumber(bytes.map(b => 0xff - b)).plus(1).negated();
  }
}

/**
 * @param bytes - Uint8Array
 * @param length - desired byte length (pad with zeroes)
 * @param trim - omit leading zeroes
 */
function toHexString(bytes, length = 0, trim = false) {
  if (typeof length == "boolean") {
    trim = length;
    length = 0;
  }

  if (_bignumber.BigNumber.isBigNumber(bytes)) {
    bytes = toBytes(bytes);
  }

  const pad = s => `${"00".slice(0, 2 - s.length)}${s}`;

  //                                          0  1  2  3  4
  //                                 0  1  2  3  4  5  6  7
  // bytes.length:        5  -  0x(          e5 c2 aa 09 11 )
  // length (preferred):  8  -  0x( 00 00 00 e5 c2 aa 09 11 )
  //                                `--.---'
  //                                     offset 3
  if (bytes.length < length) {
    let prior = bytes;
    bytes = new Uint8Array(length);

    bytes.set(prior, length - prior.length);
  }

  debug("bytes: %o", bytes);

  let string = bytes.reduce((str, byte) => `${str}${pad(byte.toString(16))}`, "");

  if (trim) {
    string = string.replace(/^(00)+/, "");
  }

  if (string.length == 0) {
    string = "00";
  }

  return `0x${string}`;
}

function toBytes(number, length = 0) {
  if (number < 0) {
    return [];
  }

  let hex = number.toString(16);
  if (hex.length % 2 == 1) {
    hex = `0${hex}`;
  }

  let bytes = new Uint8Array(hex.match(/.{2}/g).map(byte => parseInt(byte, 16)));

  if (bytes.length < length) {
    let prior = bytes;
    bytes = new Uint8Array(length);
    bytes.set(prior, length - prior.length);
  }

  return bytes;
}

function keccak256(...args) {
  let web3 = new _web2.default();

  debug("args %o", args);

  // args = args.map( (arg) => {
  //   if (typeof arg == "number" || BigNumber.isBigNumber(arg)) {
  //     return toHexString(toBytes(arg, WORD_SIZE)).slice(2)
  //   } else if (typeof arg == "string") {
  //     return web3.utils.toHex(arg).slice(2);
  //   } else {
  //     return "";
  //   }
  // });

  // debug("processed args %o", args);

  let sha = web3.utils.soliditySha3(...args);
  debug("sha %o", sha);
  return toBigNumber(sha);
}

/***/ }),
/* 12 */
/***/ (function(module, exports) {

module.exports = require("chai");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gatherArtifacts = exports.migrate = exports.compile = exports.defaultMigrations = exports.addMigrations = exports.addContracts = exports.createSandbox = exports.prepareContracts = undefined;

var _promise = __webpack_require__(23);

var _promise2 = _interopRequireDefault(_promise);

var _keys = __webpack_require__(17);

var _keys2 = _interopRequireDefault(_keys);

var _asyncToGenerator2 = __webpack_require__(7);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

let prepareContracts = exports.prepareContracts = (() => {
  var _ref = (0, _asyncToGenerator3.default)(function* (provider, sources = {}, migrations) {
    let config = yield createSandbox();

    let accounts = yield getAccounts(provider);

    config.networks["debugger"] = {
      provider: provider,
      network_id: "*",
      from: accounts[0]
    };
    config.network = "debugger";

    yield addContracts(config, sources);
    let { contracts, files } = yield compile(config);
    let contractNames = (0, _keys2.default)(contracts);

    if (!migrations) {
      migrations = yield defaultMigrations(contractNames);
    }

    yield addMigrations(config, migrations);
    yield migrate(config);

    let artifacts = yield gatherArtifacts(config);
    debug("artifacts: %o", artifacts.map(function (a) {
      return a.contractName;
    }));

    let abstractions = {};
    contractNames.forEach(function (name) {
      abstractions[name] = config.resolver.require(name);
    });

    return {
      files,
      abstractions,
      artifacts,
      config
    };
  });

  return function prepareContracts(_x) {
    return _ref.apply(this, arguments);
  };
})();

let createSandbox = exports.createSandbox = (() => {
  var _ref2 = (0, _asyncToGenerator3.default)(function* () {
    let config = yield new _promise2.default(function (accept, reject) {
      _truffleBox2.default.sandbox(function (err, result) {
        if (err) return reject(err);
        result.resolver = new _truffleResolver2.default(result);
        result.artifactor = new _truffleArtifactor2.default(result.contracts_build_directory);
        result.networks = {};

        accept(result);
      });
    });

    yield _fsExtra2.default.remove(_path2.default.join(config.contracts_directory, "MetaCoin.sol"));
    yield _fsExtra2.default.remove(_path2.default.join(config.contracts_directory, "ConvertLib.sol"));
    yield _fsExtra2.default.remove(_path2.default.join(config.migrations_directory, "2_deploy_contracts.js"));

    return config;
  });

  return function createSandbox() {
    return _ref2.apply(this, arguments);
  };
})();

let addContracts = exports.addContracts = (() => {
  var _ref3 = (0, _asyncToGenerator3.default)(function* (config, sources = {}) {
    let promises = [];
    for (let filename of (0, _keys2.default)(sources)) {
      let source = sources[filename];
      promises.push(_fsExtra2.default.outputFile(_path2.default.join(config.contracts_directory, filename), source));
    }

    return yield _promise2.default.all(promises);
  });

  return function addContracts(_x2) {
    return _ref3.apply(this, arguments);
  };
})();

let addMigrations = exports.addMigrations = (() => {
  var _ref4 = (0, _asyncToGenerator3.default)(function* (config, migrations = {}) {
    let promises = [];
    for (let filename of (0, _keys2.default)(migrations)) {
      let source = migrations[filename];
      promises.push(_fsExtra2.default.outputFile(_path2.default.join(config.migrations_directory, filename), source));
    }

    return yield _promise2.default.all(promises);
  });

  return function addMigrations(_x3) {
    return _ref4.apply(this, arguments);
  };
})();

let defaultMigrations = exports.defaultMigrations = (() => {
  var _ref5 = (0, _asyncToGenerator3.default)(function* (contractNames) {
    contractNames = contractNames.filter(function (name) {
      return name != "Migrations";
    });

    let migrations = {};

    contractNames.forEach(function (contractName, i) {
      let index = i + 2; // start at 2 cause Migrations migration
      let filename = `${index}_migrate_${contractName}.js`;
      let source = `
      var ${contractName} = artifacts.require("${contractName}");

      module.exports = function(deployer) {
        deployer.deploy(${contractName});
      };
    `;

      migrations[filename] = source;
    });

    return migrations;
  });

  return function defaultMigrations(_x4) {
    return _ref5.apply(this, arguments);
  };
})();

let compile = exports.compile = (() => {
  var _ref6 = (0, _asyncToGenerator3.default)(function* (config) {
    return new _promise2.default(function (accept, reject) {
      _truffleWorkflowCompile2.default.compile(config.with({
        all: true,
        quiet: true
      }), function (err, contracts, files) {
        if (err) return reject(err);
        return accept({ contracts, files });
      });
    });
  });

  return function compile(_x5) {
    return _ref6.apply(this, arguments);
  };
})();

let migrate = exports.migrate = (() => {
  var _ref7 = (0, _asyncToGenerator3.default)(function* (config) {
    return new _promise2.default(function (accept, reject) {
      _truffleMigrate2.default.run(config.with({
        quiet: true
      }), function (err, contracts) {
        if (err) return reject(err);
        accept(contracts);
      });
    });
  });

  return function migrate(_x6) {
    return _ref7.apply(this, arguments);
  };
})();

let gatherArtifacts = exports.gatherArtifacts = (() => {
  var _ref8 = (0, _asyncToGenerator3.default)(function* (config) {
    return _truffleDebugUtils2.default.gatherArtifacts(config);
  });

  return function gatherArtifacts(_x7) {
    return _ref8.apply(this, arguments);
  };
})();

exports.getAccounts = getAccounts;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _path = __webpack_require__(39);

var _path2 = _interopRequireDefault(_path);

var _fsExtra = __webpack_require__(40);

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _async = __webpack_require__(41);

var _async2 = _interopRequireDefault(_async);

var _truffleWorkflowCompile = __webpack_require__(42);

var _truffleWorkflowCompile2 = _interopRequireDefault(_truffleWorkflowCompile);

var _truffleDebugUtils = __webpack_require__(43);

var _truffleDebugUtils2 = _interopRequireDefault(_truffleDebugUtils);

var _truffleArtifactor = __webpack_require__(44);

var _truffleArtifactor2 = _interopRequireDefault(_truffleArtifactor);

var _web = __webpack_require__(8);

var _web2 = _interopRequireDefault(_web);

var _truffleMigrate = __webpack_require__(45);

var _truffleMigrate2 = _interopRequireDefault(_truffleMigrate);

var _truffleBox = __webpack_require__(46);

var _truffleBox2 = _interopRequireDefault(_truffleBox);

var _truffleResolver = __webpack_require__(47);

var _truffleResolver2 = _interopRequireDefault(_truffleResolver);

var _truffleExpect = __webpack_require__(27);

var _truffleExpect2 = _interopRequireDefault(_truffleExpect);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("test:helpers");

function getAccounts(provider) {
  let web3 = new _web2.default(provider);
  return new _promise2.default(function (accept, reject) {
    web3.eth.getAccounts(function (err, accounts) {
      if (err) return reject(err);
      accept(accounts);
    });
  });
}

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _reselectTree = __webpack_require__(9);

var _jsonPointer = __webpack_require__(24);

var _jsonPointer2 = _interopRequireDefault(_jsonPointer);

var _selectors = __webpack_require__(6);

var _selectors2 = _interopRequireDefault(_selectors);

var _map = __webpack_require__(28);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const debug = (0, _debug2.default)("debugger:ast:selectors");

/**
 * ast
 */
const ast = (0, _reselectTree.createSelectorTree)({
  /**
   * ast.views
   */
  views: {
    /**
     * ast.views.sources
     */
    sources: (0, _reselectTree.createLeaf)([_selectors2.default.info.sources], sources => sources)
  },

  /**
   * ast.current
   */
  current: {

    /**
     * ast.current.tree
     *
     * ast for current source
     */
    tree: (0, _reselectTree.createLeaf)([_selectors2.default.current.source], ({ ast }) => ast),

    /**
     * ast.current.index
     *
     * source ID
     */
    index: (0, _reselectTree.createLeaf)([_selectors2.default.current.source], ({ id }) => id),

    /**
     * ast.current.pointer
     *
     * jsonpointer for current ast node
     */
    pointer: (0, _reselectTree.createLeaf)(["./tree", _selectors2.default.current.sourceRange], (ast, range) => (0, _map.findRange)(ast, range.start, range.length)),

    /**
     * ast.current.node
     *
     * current ast node to execute
     */
    node: (0, _reselectTree.createLeaf)(["./tree", "./pointer"], (ast, pointer) => pointer ? _jsonPointer2.default.get(ast, pointer) : _jsonPointer2.default.get(ast, ""))

  }
});

exports.default = ast;

/***/ }),
/* 15 */
/***/ (function(module, exports) {

module.exports = require("redux");

/***/ }),
/* 16 */
/***/ (function(module, exports) {

module.exports = require("ganache-cli");

/***/ }),
/* 17 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/object/keys");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _asyncToGenerator2 = __webpack_require__(7);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _truffleExpect = __webpack_require__(27);

var _truffleExpect2 = _interopRequireDefault(_truffleExpect);

var _session = __webpack_require__(48);

var _session2 = _interopRequireDefault(_session);

var _reselectTree = __webpack_require__(9);

var _selectors = __webpack_require__(26);

var _selectors2 = _interopRequireDefault(_selectors);

var _selectors3 = __webpack_require__(14);

var _selectors4 = _interopRequireDefault(_selectors3);

var _selectors5 = __webpack_require__(19);

var _selectors6 = _interopRequireDefault(_selectors5);

var _selectors7 = __webpack_require__(2);

var _selectors8 = _interopRequireDefault(_selectors7);

var _selectors9 = __webpack_require__(6);

var _selectors10 = _interopRequireDefault(_selectors9);

var _selectors11 = __webpack_require__(35);

var _selectors12 = _interopRequireDefault(_selectors11);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const debug = (0, _debug2.default)("debugger");

/**
 * @example
 * let session = Debugger
 *   .forTx(<txHash>, {
 *     contracts: [<contract obj>, ...],
 *     provider: <provider instance>
 *   })
 *   .connect();
 */
class Debugger {
  /**
   * @param {Session} session - debugger session
   * @private
   */
  constructor(session) {
    /**
     * @private
     */
    this._session = session;
  }

  /**
   * Instantiates a Debugger for a given transaction hash.
   *
   * @param {String} txHash - transaction hash with leading "0x"
   * @param {{contracts: Array<Contract>, files: Array<String>, provider: Web3Provider}} options -
   * @return {Debugger} instance
   */
  static forTx(txHash, options = {}) {
    var _this = this;

    return (0, _asyncToGenerator3.default)(function* () {
      _truffleExpect2.default.options(options, ["contracts", "provider"]);

      let session = new _session2.default(options.contracts, options.files, txHash, options.provider);

      try {
        yield session.ready();
      } catch (e) {
        throw e;
      }

      return new _this(session);
    })();
  }

  /**
   * Connects to the instantiated Debugger.
   *
   * @return {Session} session instance
   */
  connect() {
    return this._session;
  }

  /**
   * Exported selectors
   *
   * See individual selector docs for full listing
   *
   * @example
   * Debugger.selectors.ast.current.tree
   *
   * @example
   * Debugger.selectors.solidity.current.instruction
   *
   * @example
   * Debugger.selectors.trace.steps
   */
  static get selectors() {
    return (0, _reselectTree.createNestedSelector)({
      ast: _selectors4.default,
      data: _selectors2.default,
      trace: _selectors6.default,
      evm: _selectors8.default,
      solidity: _selectors10.default,
      session: _selectors12.default
    });
  }
}

exports.default = Debugger; /**
                             * @typedef {Object} Contract
                             * @property {string} contractName contract name
                             * @property {string} source solidity source code
                             * @property {string} sourcePath path to source file
                             * @property {string} binary 0x-prefixed hex string with create bytecode
                             * @property {string} sourceMap solidity source map for create bytecode
                             * @property {Object} ast Abstract Syntax Tree from Solidity
                             * @property {string} deployedBinary 0x-prefixed compiled binary (on chain)
                             * @property {string} deployedSourceMap solidity source map for on-chain bytecode
                             */

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reselectTree = __webpack_require__(9);

let trace = (0, _reselectTree.createSelectorTree)({
  /**
   * trace.index
   *
   * current step index
   */
  index: state => state.trace.proc.index,

  /**
   * trace.steps
   *
   * all trace steps
   */
  steps: state => state.trace.info.steps,

  /**
   * trace.stepsRemaining
   *
   * number of steps remaining in trace
   */
  stepsRemaining: (0, _reselectTree.createLeaf)(["./steps", "./index"], (steps, index) => steps.length - index),

  /**
   * trace.step
   *
   * current trace step
   */
  step: (0, _reselectTree.createLeaf)(["./steps", "./index"], (steps, index) => steps[index]),

  /**
   * trace.next
   *
   * next trace step or {}
   */
  next: (0, _reselectTree.createLeaf)(["./steps", "./index"], (steps, index) => index < steps.length - 1 ? steps[index + 1] : {})
});

exports.default = trace;

/***/ }),
/* 20 */
/***/ (function(module, exports) {

module.exports = require("bignumber.js");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.saveSteps = saveSteps;
exports.receiveAddresses = receiveAddresses;
exports.next = next;
exports.tick = tick;
exports.tock = tock;
exports.endTrace = endTrace;
const SAVE_STEPS = exports.SAVE_STEPS = "SAVE_STEPS";
function saveSteps(steps) {
  return {
    type: SAVE_STEPS,
    steps
  };
}

const RECEIVE_ADDRESSES = exports.RECEIVE_ADDRESSES = "RECEIVE_ADDRESSES";
function receiveAddresses(addresses) {
  return {
    type: RECEIVE_ADDRESSES,
    addresses
  };
}

const NEXT = exports.NEXT = "NEXT";
function next() {
  return { type: NEXT };
}

const TICK = exports.TICK = "TICK";
function tick() {
  return { type: TICK };
}

const TOCK = exports.TOCK = "TOCK";
function tock() {
  return { type: TOCK };
}

const END_OF_TRACE = exports.END_OF_TRACE = "EOT";
function endTrace() {
  return { type: END_OF_TRACE };
}

/***/ }),
/* 22 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/set");

/***/ }),
/* 23 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/promise");

/***/ }),
/* 24 */
/***/ (function(module, exports) {

module.exports = require("json-pointer");

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.start = start;
exports.ready = ready;
exports.error = error;
exports.finish = finish;
exports.recordContracts = recordContracts;
const START = exports.START = "SESSION_START";
function start(txHash, provider) {
  return {
    type: START,
    txHash, provider
  };
}

const READY = exports.READY = "SESSION_READY";
function ready() {
  return {
    type: READY
  };
}

const ERROR = exports.ERROR = "SESSION_ERROR";
function error(error) {
  return {
    type: ERROR,
    error
  };
}

const FINISH = exports.FINISH = "SESSION_FINISH";
function finish() {
  return {
    type: FINISH
  };
}

const RECORD_CONTRACTS = exports.RECORD_CONTRACTS = "RECORD_CONTRACTS";
function recordContracts(contexts, sources) {
  return {
    type: RECORD_CONTRACTS,
    contexts, sources
  };
}

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = __webpack_require__(3);

var _extends3 = _interopRequireDefault(_extends2);

var _entries = __webpack_require__(1);

var _entries2 = _interopRequireDefault(_entries);

var _assign = __webpack_require__(4);

var _assign2 = _interopRequireDefault(_assign);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _reselectTree = __webpack_require__(9);

var _jsonPointer = __webpack_require__(24);

var _jsonPointer2 = _interopRequireDefault(_jsonPointer);

var _selectors = __webpack_require__(14);

var _selectors2 = _interopRequireDefault(_selectors);

var _selectors3 = __webpack_require__(2);

var _selectors4 = _interopRequireDefault(_selectors3);

var _selectors5 = __webpack_require__(6);

var _selectors6 = _interopRequireDefault(_selectors5);

var _decode = __webpack_require__(61);

var _decode2 = _interopRequireDefault(_decode);

var _utils = __webpack_require__(11);

var decodeUtils = _interopRequireWildcard(_utils);

var _bignumber = __webpack_require__(20);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const debug = (0, _debug2.default)("debugger:data:selectors");

function createStateSelectors({ stack, memory, storage }) {
  return {
    /**
     * .stack
     */
    stack: (0, _reselectTree.createLeaf)([stack], words => (words || []).map(word => decodeUtils.toBytes(decodeUtils.toBigNumber(word, decodeUtils.WORD_SIZE)))),

    /**
     * .memory
     */
    memory: (0, _reselectTree.createLeaf)([memory], words => new Uint8Array((words.join("").match(/.{1,2}/g) || []).map(byte => parseInt(byte, 16)))),

    /**
     * .storage
     */
    storage: (0, _reselectTree.createLeaf)([storage], mapping => (0, _assign2.default)({}, ...(0, _entries2.default)(mapping).map(([address, word]) => ({
      [`0x${address}`]: new Uint8Array((word.match(/.{1,2}/g) || []).map(byte => parseInt(byte, 16)))
    }))))
  };
}

const data = (0, _reselectTree.createSelectorTree)({
  state: state => state.data,

  /**
   * data.views
   */
  views: {
    ast: (0, _reselectTree.createLeaf)([_selectors2.default.current], tree => tree),

    atLastInstructionForSourceRange: (0, _reselectTree.createLeaf)([_selectors6.default.current.isSourceRangeFinal], final => final),

    /**
     * data.views.scopes
     */
    scopes: {

      /**
       * data.views.scopes.inlined
       */
      inlined: (0, _reselectTree.createLeaf)(["/info/scopes", _selectors6.default.info.sources], (scopes, sources) => (0, _assign2.default)({}, ...(0, _entries2.default)(scopes).map(([id, entry]) => ({
        [id]: (0, _extends3.default)({}, entry, {

          definition: _jsonPointer2.default.get(sources[entry.sourceId].ast, entry.pointer)
        })
      }))))
    },

    /**
     * data.views.decoder
     *
     * selector returns (ast node definition, data reference) => value
     */
    decoder: (0, _reselectTree.createLeaf)(["/views/scopes/inlined", "/next/state"], (scopes, state) => {
      return (definition, ref) => (0, _decode2.default)(definition, ref, state, scopes);
    })
  },

  /**
   * data.info
   */
  info: {

    /**
     * data.info.scopes
     */
    scopes: (0, _reselectTree.createLeaf)(["/state"], state => state.info.scopes.byId)
  },

  /**
   * data.proc
   */
  proc: {

    /**
     * data.proc.assignments
     */
    assignments: (0, _reselectTree.createLeaf)(["/state"], state => state.proc.assignments.byId)
  },

  /**
   * data.current
   */
  current: {
    /**
     *
     * data.current.scope
     */
    scope: {

      /**
       * data.current.scope.id
       */
      id: (0, _reselectTree.createLeaf)([_selectors2.default.current.node], node => node.id)
    },

    /**
     * data.current.state
     */
    state: createStateSelectors(_selectors4.default.current.state),

    /**
     * data.current.identifiers (namespace)
     */
    identifiers: {

      /**
       * data.current.identifiers (selector)
       *
       * returns identifers and corresponding definition node ID
       */
      _: (0, _reselectTree.createLeaf)(["/views/scopes/inlined", "/current/scope"], (scopes, scope) => {
        let cur = scope.id;
        let variables = {};

        do {
          variables = (0, _assign2.default)(variables, ...(scopes[cur].variables || []).filter(v => variables[v.name] == undefined).map(v => ({ [v.name]: v.id })));

          cur = scopes[cur].parentId;
        } while (cur != null);

        return variables;
      }),

      /**
       * data.current.identifiers.definitions
       *
       * current variable definitions
       */
      definitions: (0, _reselectTree.createLeaf)(["/views/scopes/inlined", "./_"], (scopes, identifiers) => (0, _assign2.default)({}, ...(0, _entries2.default)(identifiers).map(([identifier, id]) => {
        let { definition } = scopes[id];

        return { [identifier]: definition };
      }))),

      /**
       * data.current.identifiers.refs
       *
       * current variables' value refs
       */
      refs: (0, _reselectTree.createLeaf)(["/proc/assignments", "./_"], (assignments, identifiers) => (0, _assign2.default)({}, ...(0, _entries2.default)(identifiers).map(([identifier, id]) => {
        let { ref } = assignments[id] || {};
        if (!ref) {
          return undefined;
        };

        return {
          [identifier]: ref
        };
      }))),

      decoded: (0, _reselectTree.createLeaf)(["/views/decoder", "./definitions", "./refs"], (decode, definitions, refs) => (0, _assign2.default)({}, ...(0, _entries2.default)(refs).map(([identifier, ref]) => ({
        [identifier]: decode(definitions[identifier], ref)
      })))),

      native: (0, _reselectTree.createLeaf)(['./decoded'], decodeUtils.cleanBigNumbers)
    }
  },

  /**
   * data.next
   */
  next: {

    /**
     * data.next.state
     */
    state: createStateSelectors(_selectors4.default.next.state)
  }
});

exports.default = data;

/***/ }),
/* 27 */
/***/ (function(module, exports) {

module.exports = require("truffle-expect");

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _keys = __webpack_require__(17);

var _keys2 = _interopRequireDefault(_keys);

exports.getRange = getRange;
exports.rangeNodes = rangeNodes;
exports.findRange = findRange;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _nodeIntervalTree = __webpack_require__(52);

var _nodeIntervalTree2 = _interopRequireDefault(_nodeIntervalTree);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const debug = (0, _debug2.default)("debugger:ast:map");

/**
 * @private
 */
function getRange(node) {
  // src: "<start>:<length>:<_>"
  // returns [start, end]
  let [start, length] = node.src.split(":").slice(0, 2).map(i => parseInt(i));

  return [start, start + length];
}

/**
 * @private
 */
function rangeNodes(node, pointer = "") {
  if (node instanceof Array) {
    return [].concat(...node.map((sub, i) => rangeNodes(sub, `${pointer}/${i}`)));
  } else if (node instanceof Object) {
    let results = [];

    if (node.src) {
      results.push({ pointer, range: getRange(node) });
    }

    return results.concat(...(0, _keys2.default)(node).map(key => rangeNodes(node[key], `${pointer}/${key}`)));
  } else {
    return [];
  }
}

/**
 * @private
 */
function findRange(node, sourceStart, sourceLength) {
  let ranges = rangeNodes(node);
  let tree = new _nodeIntervalTree2.default();

  ranges.forEach(({ range, pointer }) => {
    let [start, end] = range;

    tree.insert(start, end, { range, pointer });
  });

  let sourceEnd = sourceStart + sourceLength;

  let overlapping = tree.search(sourceStart, sourceEnd);

  // find nodes that fully contain requested range,
  // return longest pointer
  return overlapping.filter(({ range }) => sourceStart >= range[0] && sourceEnd <= range[1]).map(({ pointer }) => pointer).reduce((a, b) => a.length > b.length ? a : b, "");
}

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.beginStep = beginStep;
exports.advance = advance;
exports.stepNext = stepNext;
exports.stepOver = stepOver;
exports.stepInto = stepInto;
exports.stepOut = stepOut;
exports.interrupt = interrupt;
exports.continueUntil = continueUntil;
const BEGIN_STEP = exports.BEGIN_STEP = "BEGIN_STEP";
function beginStep(type) {
  return {
    type: BEGIN_STEP,
    stepType: type
  };
}

const ADVANCE = exports.ADVANCE = "ADVANCE";
function advance() {
  return { type: ADVANCE };
}

const STEP_NEXT = exports.STEP_NEXT = "STEP_NEXT";
function stepNext() {
  return { type: STEP_NEXT };
}

const STEP_OVER = exports.STEP_OVER = "STEP_OVER";
function stepOver() {
  return { type: STEP_OVER };
}

const STEP_INTO = exports.STEP_INTO = "STEP_INTO";
function stepInto() {
  return { type: STEP_INTO };
}

const STEP_OUT = exports.STEP_OUT = "STEP_OUT";
function stepOut() {
  return { type: STEP_OUT };
}

const INTERRUPT = exports.INTERRUPT = "INTERRUPT";
function interrupt() {
  return { type: INTERRUPT };
}

const CONTINUE_UNTIL = exports.CONTINUE_UNTIL = "CONTINUE_UNTIL";
function continueUntil(...breakpoints) {
  return {
    type: CONTINUE_UNTIL,
    breakpoints
  };
}

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _set = __webpack_require__(22);

var _set2 = _interopRequireDefault(_set);

var _extends2 = __webpack_require__(3);

var _extends3 = _interopRequireDefault(_extends2);

var _entries = __webpack_require__(1);

var _entries2 = _interopRequireDefault(_entries);

var _assign = __webpack_require__(4);

var _assign2 = _interopRequireDefault(_assign);

exports.scope = scope;
exports.declare = declare;
exports.saga = saga;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _effects = __webpack_require__(10);

var _jsonPointer = __webpack_require__(24);

var _jsonPointer2 = _interopRequireDefault(_jsonPointer);

var _helpers = __webpack_require__(5);

var _actions = __webpack_require__(21);

var _actions2 = __webpack_require__(31);

var actions = _interopRequireWildcard(_actions2);

var _selectors = __webpack_require__(26);

var _selectors2 = _interopRequireDefault(_selectors);

var _utils = __webpack_require__(11);

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const debug = (0, _debug2.default)("debugger:data:sagas");

function* scope(nodeId, pointer, parentId, sourceId) {
  yield (0, _effects.put)(actions.scope(nodeId, pointer, parentId, sourceId));
}

function* declare(node) {
  yield (0, _effects.put)(actions.declare(node));
}

function* tickSaga() {
  let {
    tree,
    id: treeId,
    node,
    pointer
  } = yield (0, _effects.select)(_selectors2.default.views.ast);

  let decode = yield (0, _effects.select)(_selectors2.default.views.decoder);
  let scopes = yield (0, _effects.select)(_selectors2.default.info.scopes);
  let definitions = yield (0, _effects.select)(_selectors2.default.views.scopes.inlined);
  let currentAssignments = yield (0, _effects.select)(_selectors2.default.proc.assignments);

  let stack = yield (0, _effects.select)(_selectors2.default.next.state.stack);
  if (!stack) {
    return;
  }

  let top = stack.length - 1;
  var parameters, returnParameters, assignments, storageVars;

  if (!node) {
    return;
  }

  // stack is only ready for interpretation after the last step of each
  // source range
  //
  // the data module always looks at the result of a particular opcode
  // (i.e., the following trace step's stack/memory/storage), so this
  // asserts that the _current_ operation is the final one before
  // proceeding
  if (!(yield (0, _effects.select)(_selectors2.default.views.atLastInstructionForSourceRange))) {
    return;
  }

  switch (node.nodeType) {

    case "FunctionDefinition":
      parameters = node.parameters.parameters.map((p, i) => `${pointer}/parameters/parameters/${i}`);

      returnParameters = node.returnParameters.parameters.map((p, i) => `${pointer}/returnParameters/parameters/${i}`);

      assignments = returnParameters.concat(parameters).reverse().map(pointer => _jsonPointer2.default.get(tree, pointer).id).map((id, i) => ({ [id]: { "stack": top - i } })).reduce((acc, assignment) => (0, _assign2.default)(acc, assignment), {});

      yield (0, _effects.put)(actions.assign(treeId, assignments));
      break;

    case "ContractDefinition":
      let storageVars = scopes[node.id].variables || [];
      let slot = 0;
      let index = _utils.WORD_SIZE - 1; // cause lower-order
      debug("storage vars %o", storageVars);

      let allocation = utils.allocateDeclarations(storageVars, definitions);
      assignments = (0, _assign2.default)({}, ...(0, _entries2.default)(allocation.children).map(([id, storage]) => ({
        [id]: (0, _extends3.default)({}, (currentAssignments[id] || { ref: {} }).ref, {
          storage
        })
      })));
      debug("assignments %O", assignments);

      yield (0, _effects.put)(actions.assign(treeId, assignments));
      break;

    case "VariableDeclaration":
      yield (0, _effects.put)(actions.assign(treeId, {
        [_jsonPointer2.default.get(tree, pointer).id]: { "stack": top }
      }));
      break;

    case "IndexAccess":
      // to track `mapping` types known indexes
      let {
        baseExpression: {
          id: baseId,
          referencedDeclaration: baseDeclarationId
        },
        indexExpression: {
          id: indexId
        }
      } = node;

      let baseAssignment = (currentAssignments[baseDeclarationId] || {
        ref: {}
      }).ref;
      debug("baseAssignment %O", baseAssignment);

      let baseDefinition = definitions[baseDeclarationId].definition;
      if (utils.typeClass(baseDefinition) !== "mapping") {
        break;
      }

      const indexAssignment = (currentAssignments[indexId] || {}).ref;
      const indexValue = indexAssignment ? decode(node.indexExpression, indexAssignment) : node.indexExpression.value;

      debug("index value %O", indexValue);
      if (indexValue == undefined) {
        break;
      }

      assignments = {
        [baseDeclarationId]: (0, _extends3.default)({}, baseAssignment, {
          keys: [...new _set2.default([...(baseAssignment.keys || []), indexValue])]
        })
      };

      debug("mapping assignments %O", assignments);
      yield (0, _effects.put)(actions.assign(treeId, assignments));
      debug("new assignments %O", (yield (0, _effects.select)(_selectors2.default.proc.assignments)));
      break;

    case "Assignment":
      break;

    default:
      if (node.typeDescriptions == undefined) {
        break;
      }

      debug("decoding expression value %O", node.typeDescriptions);
      let literal = decode(node, { "stack": top });

      yield (0, _effects.put)(actions.assign(treeId, {
        [node.id]: { literal }
      }));
      break;
  }
}

function* saga() {
  yield (0, _effects.takeEvery)(_actions.TICK, function* () {
    try {
      yield* tickSaga();
    } catch (e) {
      debug(e);
    }
  });
}

exports.default = (0, _helpers.prefixName)("data", saga);

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scope = scope;
exports.declare = declare;
exports.assign = assign;
const SCOPE = exports.SCOPE = "SCOPE";
function scope(id, pointer, parentId, sourceId) {
  return {
    type: SCOPE,
    id, pointer, parentId, sourceId
  };
}

const DECLARE = exports.DECLARE = "DECLARE_VARIABLE";
function declare(node) {
  return {
    type: DECLARE,
    node
  };
}

const ASSIGN = exports.ASSIGN = "ASSIGN";
function assign(context, assignments) {
  return {
    type: ASSIGN,
    context, assignments
  };
}

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _set = __webpack_require__(22);

var _set2 = _interopRequireDefault(_set);

exports.advance = advance;
exports.wait = wait;
exports.processTrace = processTrace;
exports.saga = saga;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _effects = __webpack_require__(10);

var _helpers = __webpack_require__(5);

var _actions = __webpack_require__(21);

var actions = _interopRequireWildcard(_actions);

var _selectors = __webpack_require__(19);

var _selectors2 = _interopRequireDefault(_selectors);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const debug = (0, _debug2.default)("debugger:trace:sagas");

function* waitForTrace() {
  let { steps } = yield (0, _effects.take)(actions.SAVE_STEPS);

  let addresses = [...new _set2.default(steps.filter(({ op }) => op == "CALL" || op == "DELEGATECALL").map(({ stack }) => "0x" + stack[stack.length - 2].substring(24)))];

  yield (0, _effects.put)(actions.receiveAddresses(addresses));
}

function* advance() {
  yield (0, _effects.put)(actions.next());

  yield (0, _effects.take)(actions.TOCK);
}

function* next() {
  let remaining = yield (0, _effects.select)(_selectors2.default.stepsRemaining);
  debug("remaining: %o", remaining);
  let steps = yield (0, _effects.select)(_selectors2.default.steps);
  debug("total steps: %o", steps.length);

  if (remaining > 0) {
    debug("putting TICK");
    // updates state for current step
    yield (0, _effects.put)(actions.tick());
    debug("put TICK");

    remaining--; // local update, just for convenience
  }

  if (remaining) {
    debug("putting TOCK");
    // updates step to next step in trace
    yield (0, _effects.put)(actions.tock());
    debug("put TOCK");
  } else {

    yield (0, _effects.put)(actions.endTrace());
  }
}

function* wait() {
  yield (0, _effects.take)(actions.END_OF_TRACE);
}

function* processTrace(trace) {
  yield (0, _effects.put)(actions.saveSteps(trace));

  let { addresses } = yield (0, _effects.take)(actions.RECEIVE_ADDRESSES);
  debug("received addresses");

  return addresses;
}

function* saga() {
  // wait for trace to be defined
  yield* waitForTrace();

  yield (0, _effects.takeEvery)(actions.NEXT, next);
}

exports.default = (0, _helpers.prefixName)("trace", saga);

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addSource = addSource;
exports.addSourceMap = addSourceMap;
exports.jump = jump;
const ADD_SOURCE = exports.ADD_SOURCE = "SOLIDITY_ADD_SOURCE";
function addSource(source, sourcePath, ast) {
  return {
    type: ADD_SOURCE,
    source, sourcePath, ast
  };
}

const ADD_SOURCEMAP = exports.ADD_SOURCEMAP = "SOLIDITY_ADD_SOURCEMAP";
function addSourceMap(binary, sourceMap) {
  return {
    type: ADD_SOURCEMAP,
    binary, sourceMap
  };
}

const JUMP = exports.JUMP = "JUMP";
function jump(jumpDirection) {
  return {
    type: JUMP,
    jumpDirection
  };
}

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addContext = addContext;
exports.addInstance = addInstance;
exports.call = call;
exports.create = create;
exports.returnCall = returnCall;
const ADD_CONTEXT = exports.ADD_CONTEXT = "EVM_ADD_CONTEXT";
function addContext(contractName, binary) {
  return {
    type: ADD_CONTEXT,
    contractName, binary
  };
}

const ADD_INSTANCE = exports.ADD_INSTANCE = "EVM_ADD_INSTANCE";
function addInstance(address, context, binary) {
  return {
    type: ADD_INSTANCE,
    address, context, binary
  };
}

const CALL = exports.CALL = "CALL";
function call(address) {
  return {
    type: CALL,
    address
  };
}

const CREATE = exports.CREATE = "CREATE";
function create(binary) {
  return {
    type: CREATE,
    binary
  };
}

const RETURN = exports.RETURN = "RETURN";
function returnCall() {
  return {
    type: RETURN
  };
}

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _entries = __webpack_require__(1);

var _entries2 = _interopRequireDefault(_entries);

var _assign = __webpack_require__(4);

var _assign2 = _interopRequireDefault(_assign);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _reselectTree = __webpack_require__(9);

var _selectors = __webpack_require__(2);

var _selectors2 = _interopRequireDefault(_selectors);

var _selectors3 = __webpack_require__(6);

var _selectors4 = _interopRequireDefault(_selectors3);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const debug = (0, _debug2.default)("debugger:session:selectors");

const session = (0, _reselectTree.createSelectorTree)({
  /**
   * session.info
   */
  info: {

    /**
     * session.info.affectedInstances
     */
    affectedInstances: (0, _reselectTree.createLeaf)([_selectors2.default.info.instances, _selectors2.default.info.contexts, _selectors4.default.info.sources, _selectors4.default.info.sourceMaps], (instances, contexts, sources, sourceMaps) => (0, _assign2.default)({}, ...(0, _entries2.default)(instances).map(([address, { context }]) => {
      let { contractName, binary } = contexts[context];
      let { sourceMap } = sourceMaps[context];

      let { source } = sourceMap ?
      // look for source ID between second and third colons (HACK)
      sources[sourceMap.match(/^[^:]+:[^:]+:([^:]+):/)[1]] : {};

      return {
        [address]: {
          contractName, source, binary
        }
      };
    })))
  }
});

exports.default = session;

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _asyncToGenerator2 = __webpack_require__(7);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

let prepareDebugger = (() => {
  var _ref2 = (0, _asyncToGenerator3.default)(function* (testName, sources) {
    const provider = _ganacheCli2.default.provider({ seed: "debugger", gasLimit: 7000000 });
    const web3 = new _web2.default(provider);

    let { abstractions, artifacts: contracts, files } = yield (0, _helpers.prepareContracts)(provider, sources);

    let instance = yield abstractions[contractName(testName)].deployed();
    let receipt = yield instance.run();
    let txHash = receipt.tx;

    let bugger = yield _debugger2.default.forTx(txHash, { provider, files, contracts });

    let session = bugger.connect();

    let breakpoint = {
      address: instance.address,
      line: lastStatementLine(sources[fileName(testName)])
    };

    session.continueUntil(breakpoint);

    return session;
  });

  return function prepareDebugger(_x, _x2) {
    return _ref2.apply(this, arguments);
  };
})();

let getDecode = (() => {
  var _ref3 = (0, _asyncToGenerator3.default)(function* (session) {
    const definitions = session.view(_selectors2.default.current.identifiers.definitions);
    const refs = session.view(_selectors2.default.current.identifiers.refs);

    const decode = session.view(_selectors2.default.views.decoder);
    return function (name) {
      return (0, _utils.cleanBigNumbers)(decode(definitions[name], refs[name]));
    };
  });

  return function getDecode(_x3) {
    return _ref3.apply(this, arguments);
  };
})();

exports.generateUints = generateUints;
exports.describeDecoding = describeDecoding;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _ganacheCli = __webpack_require__(16);

var _ganacheCli2 = _interopRequireDefault(_ganacheCli);

var _web = __webpack_require__(8);

var _web2 = _interopRequireDefault(_web);

var _chai = __webpack_require__(12);

var _changeCase = __webpack_require__(82);

var _changeCase2 = _interopRequireDefault(_changeCase);

var _helpers = __webpack_require__(13);

var _debugger = __webpack_require__(18);

var _debugger2 = _interopRequireDefault(_debugger);

var _utils = __webpack_require__(11);

var _selectors = __webpack_require__(26);

var _selectors2 = _interopRequireDefault(_selectors);

var _selectors3 = __webpack_require__(2);

var _selectors4 = _interopRequireDefault(_selectors3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("test:data:decode");

function* generateUints() {
  let x = 0;
  while (true) {
    yield x;
    x++;
  }
}

function contractName(testName) {
  return testName.replace(/ /g, "");
}

function fileName(testName) {
  return `${contractName(testName)}.sol`;
}

function generateTests(fixtures) {
  for (let _ref of fixtures) {
    let { name, value: expected } = _ref;

    it(`correctly decodes ${name}`, () => {
      _chai.assert.deepEqual(this.decode(name), expected);
    });
  }
}

function lastStatementLine(source) {
  const lines = source.split("\n");
  for (let i = lines.length - 1; i >= 0; i--) {
    let line = lines[i];
    if (line.indexOf(";") != -1) {
      return i;
    }
  }
}

function describeDecoding(testName, fixtures, selector, generateSource) {
  const sources = {
    [fileName(testName)]: generateSource(contractName(testName), fixtures)
  };

  describe(testName, function () {
    var _this = this;

    const testDebug = (0, _debug2.default)(`test:data:decode:${_changeCase2.default.paramCase(testName)}`);

    this.timeout(30000);

    before("runs and observes debugger", (0, _asyncToGenerator3.default)(function* () {
      const session = yield prepareDebugger(testName, sources);
      _this.decode = yield getDecode(session);

      testDebug("storage %O", session.view(_selectors4.default.current.state.storage));

      if (selector) {
        debug("selector %O", session.view(selector));
      }
    }));

    generateTests.bind(this)(fixtures);
  });
}

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

// runtime helper
function inManifest(id) { return global.__webpackManifest__.indexOf(id) >= 0;}
function run(id) { __webpack_require__(id);}

// modules to execute goes here
var ids = [
/*require.resolve*/(38),/*require.resolve*/(78),/*require.resolve*/(79),/*require.resolve*/(36),/*require.resolve*/(83),/*require.resolve*/(84),/*require.resolve*/(13),/*require.resolve*/(85)
];

ids.filter(inManifest).forEach(run)

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _asyncToGenerator2 = __webpack_require__(7);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _chai = __webpack_require__(12);

var _ganacheCli = __webpack_require__(16);

var _ganacheCli2 = _interopRequireDefault(_ganacheCli);

var _web = __webpack_require__(8);

var _web2 = _interopRequireDefault(_web);

var _helpers = __webpack_require__(13);

var _debugger = __webpack_require__(18);

var _debugger2 = _interopRequireDefault(_debugger);

var _selectors = __webpack_require__(14);

var _selectors2 = _interopRequireDefault(_selectors);

var _selectors3 = __webpack_require__(6);

var _selectors4 = _interopRequireDefault(_selectors3);

var _map = __webpack_require__(28);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("test:ast");

const __VARIABLES = `
pragma solidity ^0.4.18;

contract Variables {
  event Result(uint256 result);

  uint256 qux;
  string quux;

  function stack(uint256 foo) public returns (uint256) {
    uint256 bar = foo + 1;
    uint256 baz = innerStack(bar);

    baz += 4;

    qux = baz;

    Result(baz);

    return baz;
  }

  function innerStack(uint256 baz) public returns (uint256) {
    uint256 bar = baz + 2;
    return bar;
  }
}
`;

let sources = {
  "Variables.sol": __VARIABLES
};

describe("AST", function () {
  var provider;
  var web3;

  var abstractions;
  var artifacts;
  var files;

  before("Create Provider", (0, _asyncToGenerator3.default)(function* () {
    provider = _ganacheCli2.default.provider({ seed: "debugger", gasLimit: 7000000 });
    web3 = new _web2.default(provider);
  }));

  before("Prepare contracts and artifacts", (0, _asyncToGenerator3.default)(function* () {
    this.timeout(30000);

    let prepared = yield (0, _helpers.prepareContracts)(provider, sources);
    abstractions = prepared.abstractions;
    artifacts = prepared.artifacts;
    files = prepared.files;
  }));

  describe("Node pointer", function () {
    it("traverses", (0, _asyncToGenerator3.default)(function* () {
      this.timeout(0);
      let instance = yield abstractions.Variables.deployed();
      let receipt = yield instance.stack(4);
      let txHash = receipt.tx;

      let bugger = yield _debugger2.default.forTx(txHash, {
        provider,
        files,
        contracts: artifacts
      });

      let session = bugger.connect();
      debug("ast: %O", session.view(_selectors2.default.current.tree));

      do {
        let { start, length } = session.view(_selectors4.default.current.sourceRange);
        let end = start + length;

        let node = session.view(_selectors2.default.current.node);

        let [nodeStart, nodeLength] = (0, _map.getRange)(node);
        let nodeEnd = nodeStart + nodeLength;

        let pointer = session.view(_selectors2.default.current.pointer);

        _chai.assert.isAtMost(nodeStart, start, `Node ${pointer} at should not begin after instruction source range`);
        _chai.assert.isAtLeast(nodeEnd, end, `Node ${pointer} should not end after source`);

        session.stepNext();
      } while (!session.finished);
    }));
  });
});

/***/ }),
/* 39 */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),
/* 40 */
/***/ (function(module, exports) {

module.exports = require("fs-extra");

/***/ }),
/* 41 */
/***/ (function(module, exports) {

module.exports = require("async");

/***/ }),
/* 42 */
/***/ (function(module, exports) {

module.exports = require("truffle-workflow-compile");

/***/ }),
/* 43 */
/***/ (function(module, exports) {

module.exports = require("truffle-debug-utils");

/***/ }),
/* 44 */
/***/ (function(module, exports) {

module.exports = require("truffle-artifactor");

/***/ }),
/* 45 */
/***/ (function(module, exports) {

module.exports = require("truffle-migrate");

/***/ }),
/* 46 */
/***/ (function(module, exports) {

module.exports = require("truffle-box");

/***/ }),
/* 47 */
/***/ (function(module, exports) {

module.exports = require("truffle-resolver");

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _values = __webpack_require__(49);

var _values2 = _interopRequireDefault(_values);

var _promise = __webpack_require__(23);

var _promise2 = _interopRequireDefault(_promise);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _selectors = __webpack_require__(19);

var _selectors2 = _interopRequireDefault(_selectors);

var _selectors3 = __webpack_require__(2);

var _selectors4 = _interopRequireDefault(_selectors3);

var _selectors5 = __webpack_require__(14);

var _selectors6 = _interopRequireDefault(_selectors5);

var _selectors7 = __webpack_require__(6);

var _selectors8 = _interopRequireDefault(_selectors7);

var _store = __webpack_require__(54);

var _store2 = _interopRequireDefault(_store);

var _actions = __webpack_require__(29);

var controller = _interopRequireWildcard(_actions);

var _actions2 = __webpack_require__(25);

var actions = _interopRequireWildcard(_actions2);

var _sagas = __webpack_require__(59);

var _sagas2 = _interopRequireDefault(_sagas);

var _reducers = __webpack_require__(72);

var _reducers2 = _interopRequireDefault(_reducers);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const debug = (0, _debug2.default)("debugger:session");

/**
 * Debugger Session
 */
class Session {
  /**
   * @param {Array<Contract>} contracts - contract definitions
   * @param {Array<String>} files - array of filenames for sourceMap indexes
   * @param {string} txHash - transaction hash
   * @param {Web3Provider} provider - web3 provider
   * @private
   */
  constructor(contracts, files, txHash, provider) {
    /**
     * @private
     */
    this._store = (0, _store2.default)(_reducers2.default, _sagas2.default);

    let { contexts, sources } = Session.normalize(contracts, files);

    // record contracts
    this._store.dispatch(actions.recordContracts(contexts, sources));

    this._store.dispatch(actions.start(txHash, provider));
  }

  ready() {
    return new _promise2.default((accept, reject) => {
      this._store.subscribe(() => {
        if (this.state.session == "ACTIVE") {
          accept();
        } else if (typeof this.state.session == "object") {
          reject(this.state.session.error);
        }
      });
    });
  }

  /**
   * Split up artifacts into "contexts" and "sources", dividing artifact
   * data into appropriate buckets.
   *
   * Multiple contracts can be defined in the same source file, but have
   * different bytecodes.
   *
   * This iterates over the contracts and collects binaries separately
   * from sources, using the optional `files` argument to force
   * source ordering.
   * @private
   */
  static normalize(contracts, files = null) {
    let sourcesByPath = {};
    let contexts = [];
    let sources;

    for (let contract of contracts) {
      let {
        contractName,
        binary,
        sourceMap,
        deployedBinary,
        deployedSourceMap,
        sourcePath,
        source,
        ast
      } = contract;

      sourcesByPath[sourcePath] = { sourcePath, source, ast };

      if (binary && binary != "0x") {
        contexts.push({
          contractName,
          binary,
          sourceMap
        });
      }

      if (deployedBinary && deployedBinary != "0x") {
        contexts.push({
          contractName,
          binary: deployedBinary,
          sourceMap: deployedSourceMap
        });
      }
    }

    if (!files) {
      sources = (0, _values2.default)(sourcesByPath);
    } else {
      sources = files.map(file => sourcesByPath[file]);
    }

    return { contexts, sources };
  }

  get state() {
    return this._store.getState();
  }

  view(selector) {
    return selector(this.state);
  }

  get finished() {
    return this.state.session == "FINISHED";
  }

  get failed() {
    return this.finished && this.view(_selectors4.default.current.callstack).length;
  }

  dispatch(action) {
    if (this.finished) {
      debug("finished: intercepting action %o", action);

      return false;
    }

    this._store.dispatch(action);

    return true;
  }

  interrupt() {
    return this.dispatch(controller.interrupt());
  }

  advance() {
    return this.dispatch(controller.advance());
  }

  stepNext() {
    return this.dispatch(controller.stepNext());
  }

  stepOver() {
    return this.dispatch(controller.stepOver());
  }

  stepInto() {
    return this.dispatch(controller.stepInto());
  }

  stepOut() {
    return this.dispatch(controller.stepOut());
  }

  continueUntil(...breakpoints) {
    return this.dispatch(controller.continueUntil(...breakpoints));
  }
}
exports.default = Session;

/***/ }),
/* 49 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/object/values");

/***/ }),
/* 50 */
/***/ (function(module, exports) {

module.exports = require("truffle-solidity-utils");

/***/ }),
/* 51 */
/***/ (function(module, exports) {

module.exports = require("truffle-code-utils");

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// An augmented AVL Tree where each node maintains a list of records and their search intervals.
// Record is composed of an interval and its underlying data, sent by a client. This allows the
// interval tree to have the same interval inserted multiple times, as long its data is different.
// Both insertion and deletion require O(log n) time. Searching requires O(k*logn) time, where `k`
// is the number of intervals in the output list.
Object.defineProperty(exports, "__esModule", { value: true });
var isSame = __webpack_require__(53);
function height(node) {
    if (node === undefined) {
        return -1;
    }
    else {
        return node.height;
    }
}
var Node = /** @class */ (function () {
    function Node(intervalTree, record) {
        this.intervalTree = intervalTree;
        this.records = [];
        this.height = 0;
        this.key = record.low;
        this.max = record.high;
        // Save the array of all records with the same key for this node
        this.records.push(record);
    }
    // Gets the highest record.high value for this node
    Node.prototype.getNodeHigh = function () {
        var high = this.records[0].high;
        for (var i = 1; i < this.records.length; i++) {
            if (this.records[i].high > high) {
                high = this.records[i].high;
            }
        }
        return high;
    };
    // Updates height value of the node. Called during insertion, rebalance, removal
    Node.prototype.updateHeight = function () {
        this.height = Math.max(height(this.left), height(this.right)) + 1;
    };
    // Updates the max value of all the parents after inserting into already existing node, as well as
    // removing the node completely or removing the record of an already existing node. Starts with
    // the parent of an affected node and bubbles up to root
    Node.prototype.updateMaxOfParents = function () {
        if (this === undefined) {
            return;
        }
        var thisHigh = this.getNodeHigh();
        if (this.left !== undefined && this.right !== undefined) {
            this.max = Math.max(Math.max(this.left.max, this.right.max), thisHigh);
        }
        else if (this.left !== undefined && this.right === undefined) {
            this.max = Math.max(this.left.max, thisHigh);
        }
        else if (this.left === undefined && this.right !== undefined) {
            this.max = Math.max(this.right.max, thisHigh);
        }
        else {
            this.max = thisHigh;
        }
        if (this.parent) {
            this.parent.updateMaxOfParents();
        }
    };
    /*
    Left-Left case:
  
           z                                      y
          / \                                   /   \
         y   T4      Right Rotate (z)          x     z
        / \          - - - - - - - - ->       / \   / \
       x   T3                                T1 T2 T3 T4
      / \
    T1   T2
  
    Left-Right case:
  
         z                               z                           x
        / \                             / \                        /   \
       y   T4  Left Rotate (y)         x  T4  Right Rotate(z)     y     z
      / \      - - - - - - - - ->     / \      - - - - - - - ->  / \   / \
    T1   x                           y  T3                      T1 T2 T3 T4
        / \                         / \
      T2   T3                      T1 T2
    */
    // Handles Left-Left case and Left-Right case after rebalancing AVL tree
    Node.prototype._updateMaxAfterRightRotate = function () {
        var parent = this.parent;
        var left = parent.left;
        // Update max of left sibling (x in first case, y in second)
        var thisParentLeftHigh = left.getNodeHigh();
        if (left.left === undefined && left.right !== undefined) {
            left.max = Math.max(thisParentLeftHigh, left.right.max);
        }
        else if (left.left !== undefined && left.right === undefined) {
            left.max = Math.max(thisParentLeftHigh, left.left.max);
        }
        else if (left.left === undefined && left.right === undefined) {
            left.max = thisParentLeftHigh;
        }
        else {
            left.max = Math.max(Math.max(left.left.max, left.right.max), thisParentLeftHigh);
        }
        // Update max of itself (z)
        var thisHigh = this.getNodeHigh();
        if (this.left === undefined && this.right !== undefined) {
            this.max = Math.max(thisHigh, this.right.max);
        }
        else if (this.left !== undefined && this.right === undefined) {
            this.max = Math.max(thisHigh, this.left.max);
        }
        else if (this.left === undefined && this.right === undefined) {
            this.max = thisHigh;
        }
        else {
            this.max = Math.max(Math.max(this.left.max, this.right.max), thisHigh);
        }
        // Update max of parent (y in first case, x in second)
        parent.max = Math.max(Math.max(parent.left.max, parent.right.max), parent.getNodeHigh());
    };
    /*
    Right-Right case:
  
      z                               y
     / \                            /   \
    T1  y     Left Rotate(z)       z     x
       / \   - - - - - - - ->     / \   / \
      T2  x                      T1 T2 T3 T4
         / \
        T3 T4
  
    Right-Left case:
  
       z                            z                            x
      / \                          / \                         /   \
     T1  y   Right Rotate (y)     T1  x      Left Rotate(z)   z     y
        / \  - - - - - - - - ->      / \   - - - - - - - ->  / \   / \
       x  T4                        T2  y                   T1 T2 T3 T4
      / \                              / \
    T2   T3                           T3 T4
    */
    // Handles Right-Right case and Right-Left case in rebalancing AVL tree
    Node.prototype._updateMaxAfterLeftRotate = function () {
        var parent = this.parent;
        var right = parent.right;
        // Update max of right sibling (x in first case, y in second)
        var thisParentRightHigh = right.getNodeHigh();
        if (right.left === undefined && right.right !== undefined) {
            right.max = Math.max(thisParentRightHigh, right.right.max);
        }
        else if (right.left !== undefined && right.right === undefined) {
            right.max = Math.max(thisParentRightHigh, right.left.max);
        }
        else if (right.left === undefined && right.right === undefined) {
            right.max = thisParentRightHigh;
        }
        else {
            right.max = Math.max(Math.max(right.left.max, right.right.max), thisParentRightHigh);
        }
        // Update max of itself (z)
        var thisHigh = this.getNodeHigh();
        if (this.left === undefined && this.right !== undefined) {
            this.max = Math.max(thisHigh, this.right.max);
        }
        else if (this.left !== undefined && this.right === undefined) {
            this.max = Math.max(thisHigh, this.left.max);
        }
        else if (this.left === undefined && this.right === undefined) {
            this.max = thisHigh;
        }
        else {
            this.max = Math.max(Math.max(this.left.max, this.right.max), thisHigh);
        }
        // Update max of parent (y in first case, x in second)
        parent.max = Math.max(Math.max(parent.left.max, right.max), parent.getNodeHigh());
    };
    Node.prototype._leftRotate = function () {
        var rightChild = this.right;
        rightChild.parent = this.parent;
        if (rightChild.parent === undefined) {
            this.intervalTree.root = rightChild;
        }
        else {
            if (rightChild.parent.left === this) {
                rightChild.parent.left = rightChild;
            }
            else if (rightChild.parent.right === this) {
                rightChild.parent.right = rightChild;
            }
        }
        this.right = rightChild.left;
        if (this.right !== undefined) {
            this.right.parent = this;
        }
        rightChild.left = this;
        this.parent = rightChild;
        this.updateHeight();
        rightChild.updateHeight();
    };
    Node.prototype._rightRotate = function () {
        var leftChild = this.left;
        leftChild.parent = this.parent;
        if (leftChild.parent === undefined) {
            this.intervalTree.root = leftChild;
        }
        else {
            if (leftChild.parent.left === this) {
                leftChild.parent.left = leftChild;
            }
            else if (leftChild.parent.right === this) {
                leftChild.parent.right = leftChild;
            }
        }
        this.left = leftChild.right;
        if (this.left !== undefined) {
            this.left.parent = this;
        }
        leftChild.right = this;
        this.parent = leftChild;
        this.updateHeight();
        leftChild.updateHeight();
    };
    // Rebalances the tree if the height value between two nodes of the same parent is greater than
    // two. There are 4 cases that can happen which are outlined in the graphics above
    Node.prototype._rebalance = function () {
        if (height(this.left) >= 2 + height(this.right)) {
            var left = this.left;
            if (height(left.left) >= height(left.right)) {
                // Left-Left case
                this._rightRotate();
                this._updateMaxAfterRightRotate();
            }
            else {
                // Left-Right case
                left._leftRotate();
                this._rightRotate();
                this._updateMaxAfterRightRotate();
            }
        }
        else if (height(this.right) >= 2 + height(this.left)) {
            var right = this.right;
            if (height(right.right) >= height(right.left)) {
                // Right-Right case
                this._leftRotate();
                this._updateMaxAfterLeftRotate();
            }
            else {
                // Right-Left case
                right._rightRotate();
                this._leftRotate();
                this._updateMaxAfterLeftRotate();
            }
        }
    };
    Node.prototype.insert = function (record) {
        if (record.low < this.key) {
            // Insert into left subtree
            if (this.left === undefined) {
                this.left = new Node(this.intervalTree, record);
                this.left.parent = this;
            }
            else {
                this.left.insert(record);
            }
        }
        else {
            // Insert into right subtree
            if (this.right === undefined) {
                this.right = new Node(this.intervalTree, record);
                this.right.parent = this;
            }
            else {
                this.right.insert(record);
            }
        }
        // Update the max value of this ancestor if needed
        if (this.max < record.high) {
            this.max = record.high;
        }
        // Update height of each node
        this.updateHeight();
        // Rebalance the tree to ensure all operations are executed in O(logn) time. This is especially
        // important in searching, as the tree has a high chance of degenerating without the rebalancing
        this._rebalance();
    };
    Node.prototype._getOverlappingRecords = function (currentNode, low, high) {
        if (currentNode.key <= high && low <= currentNode.getNodeHigh()) {
            // Nodes are overlapping, check if individual records in the node are overlapping
            var tempResults = [];
            for (var i = 0; i < currentNode.records.length; i++) {
                if (currentNode.records[i].high >= low) {
                    tempResults.push(currentNode.records[i]);
                }
            }
            return tempResults;
        }
        return [];
    };
    Node.prototype.search = function (low, high) {
        // Don't search nodes that don't exist
        if (this === undefined) {
            return [];
        }
        var leftSearch = [];
        var ownSearch = [];
        var rightSearch = [];
        // If interval is to the right of the rightmost point of any interval in this node and all its
        // children, there won't be any matches
        if (low > this.max) {
            return [];
        }
        // Search left children
        if (this.left !== undefined && this.left.max >= low) {
            leftSearch = this.left.search(low, high);
        }
        // Check this node
        ownSearch = this._getOverlappingRecords(this, low, high);
        // If interval is to the left of the start of this interval, then it can't be in any child to
        // the right
        if (high < this.key) {
            return leftSearch.concat(ownSearch);
        }
        // Otherwise, search right children
        if (this.right !== undefined) {
            rightSearch = this.right.search(low, high);
        }
        // Return accumulated results, if any
        return leftSearch.concat(ownSearch, rightSearch);
    };
    // Searches for a node by a `key` value
    Node.prototype.searchExisting = function (low) {
        if (this === undefined) {
            return undefined;
        }
        if (this.key === low) {
            return this;
        }
        else if (low < this.key) {
            if (this.left !== undefined) {
                return this.left.searchExisting(low);
            }
        }
        else {
            if (this.right !== undefined) {
                return this.right.searchExisting(low);
            }
        }
        return undefined;
    };
    // Returns the smallest node of the subtree
    Node.prototype._minValue = function () {
        if (this.left === undefined) {
            return this;
        }
        else {
            return this.left._minValue();
        }
    };
    Node.prototype.remove = function (node) {
        var parent = this.parent;
        if (node.key < this.key) {
            // Node to be removed is on the left side
            if (this.left !== undefined) {
                return this.left.remove(node);
            }
            else {
                return undefined;
            }
        }
        else if (node.key > this.key) {
            // Node to be removed is on the right side
            if (this.right !== undefined) {
                return this.right.remove(node);
            }
            else {
                return undefined;
            }
        }
        else {
            if (this.left !== undefined && this.right !== undefined) {
                // Node has two children
                var minValue = this.right._minValue();
                this.key = minValue.key;
                this.records = minValue.records;
                return this.right.remove(this);
            }
            else if (parent.left === this) {
                // One child or no child case on left side
                if (this.right !== undefined) {
                    parent.left = this.right;
                    this.right.parent = parent;
                }
                else {
                    parent.left = this.left;
                    if (this.left !== undefined) {
                        this.left.parent = parent;
                    }
                }
                parent.updateMaxOfParents();
                parent.updateHeight();
                parent._rebalance();
                return this;
            }
            else if (parent.right === this) {
                // One child or no child case on right side
                if (this.right !== undefined) {
                    parent.right = this.right;
                    this.right.parent = parent;
                }
                else {
                    parent.right = this.left;
                    if (this.left !== undefined) {
                        this.left.parent = parent;
                    }
                }
                parent.updateMaxOfParents();
                parent.updateHeight();
                parent._rebalance();
                return this;
            }
        }
    };
    return Node;
}());
exports.Node = Node;
var IntervalTree = /** @class */ (function () {
    function IntervalTree() {
        this.count = 0;
    }
    IntervalTree.prototype.insert = function (record) {
        if (record.low > record.high) {
            throw new Error('`low` value must be lower or equal to `high` value');
        }
        if (this.root === undefined) {
            // Base case: Tree is empty, new node becomes root
            this.root = new Node(this, record);
            this.count++;
            return true;
        }
        else {
            // Otherwise, check if node already exists with the same key
            var node = this.root.searchExisting(record.low);
            if (node !== undefined) {
                // Check the records in this node if there already is the one with same low, high, data
                for (var i = 0; i < node.records.length; i++) {
                    if (isSame(node.records[i], record)) {
                        // This record is same as the one we're trying to insert; return false to indicate
                        // nothing has been inserted
                        return false;
                    }
                }
                // Add the record to the node
                node.records.push(record);
                // Update max of the node and its parents if necessary
                if (record.high > node.max) {
                    node.max = record.high;
                    if (node.parent) {
                        node.parent.updateMaxOfParents();
                    }
                }
                this.count++;
                return true;
            }
            else {
                // Node with this key doesn't already exist. Call insert function on root's node
                this.root.insert(record);
                this.count++;
                return true;
            }
        }
    };
    IntervalTree.prototype.search = function (low, high) {
        if (this.root === undefined) {
            // Tree is empty; return empty array
            return [];
        }
        else {
            return this.root.search(low, high);
        }
    };
    IntervalTree.prototype.remove = function (record) {
        if (this.root === undefined) {
            // Tree is empty; nothing to remove
            return false;
        }
        else {
            var node = this.root.searchExisting(record.low);
            if (node === undefined) {
                return false;
            }
            else if (node.records.length > 1) {
                var removedRecord = void 0;
                // Node with this key has 2 or more records. Find the one we need and remove it
                for (var i = 0; i < node.records.length; i++) {
                    if (isSame(node.records[i], record)) {
                        removedRecord = node.records[i];
                        node.records.splice(i, 1);
                        break;
                    }
                }
                if (removedRecord) {
                    removedRecord = undefined;
                    // Update max of that node and its parents if necessary
                    if (record.high === node.max) {
                        var nodeHigh = node.getNodeHigh();
                        if (node.left !== undefined && node.right !== undefined) {
                            node.max = Math.max(Math.max(node.left.max, node.right.max), nodeHigh);
                        }
                        else if (node.left !== undefined && node.right === undefined) {
                            node.max = Math.max(node.left.max, nodeHigh);
                        }
                        else if (node.left === undefined && node.right !== undefined) {
                            node.max = Math.max(node.right.max, nodeHigh);
                        }
                        else {
                            node.max = nodeHigh;
                        }
                        if (node.parent) {
                            node.parent.updateMaxOfParents();
                        }
                    }
                    this.count--;
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (node.records.length === 1) {
                // Node with this key has only 1 record. Check if the remaining record in this node is
                // actually the one we want to remove
                if (isSame(node.records[0], record)) {
                    // The remaining record is the one we want to remove. Remove the whole node from the tree
                    if (this.root.key === node.key) {
                        // We're removing the root element. Create a dummy node that will temporarily take
                        // root's parent role
                        var rootParent = new Node(this, { low: record.low, high: record.low });
                        rootParent.left = this.root;
                        this.root.parent = rootParent;
                        var removedNode = this.root.remove(node);
                        this.root = rootParent.left;
                        if (this.root !== undefined) {
                            this.root.parent = undefined;
                        }
                        if (removedNode) {
                            removedNode = undefined;
                            this.count--;
                            return true;
                        }
                        else {
                            return false;
                        }
                    }
                    else {
                        var removedNode = this.root.remove(node);
                        if (removedNode) {
                            removedNode = undefined;
                            this.count--;
                            return true;
                        }
                        else {
                            return false;
                        }
                    }
                }
                else {
                    // The remaining record is not the one we want to remove
                    return false;
                }
            }
            else {
                // No records at all in this node?! Shouldn't happen
                return false;
            }
        }
    };
    IntervalTree.prototype.inOrder = function () {
        return new InOrder(this.root);
    };
    IntervalTree.prototype.preOrder = function () {
        return new PreOrder(this.root);
    };
    return IntervalTree;
}());
exports.IntervalTree = IntervalTree;
var DataIntervalTree = /** @class */ (function () {
    function DataIntervalTree() {
        this.tree = new IntervalTree();
    }
    DataIntervalTree.prototype.insert = function (low, high, data) {
        return this.tree.insert({ low: low, high: high, data: data });
    };
    DataIntervalTree.prototype.remove = function (low, high, data) {
        return this.tree.remove({ low: low, high: high, data: data });
    };
    DataIntervalTree.prototype.search = function (low, high) {
        return this.tree.search(low, high).map(function (v) { return v.data; });
    };
    DataIntervalTree.prototype.inOrder = function () {
        return this.tree.inOrder();
    };
    DataIntervalTree.prototype.preOrder = function () {
        return this.tree.preOrder();
    };
    Object.defineProperty(DataIntervalTree.prototype, "count", {
        get: function () {
            return this.tree.count;
        },
        enumerable: true,
        configurable: true
    });
    return DataIntervalTree;
}());
exports.default = DataIntervalTree;
var InOrder = /** @class */ (function () {
    function InOrder(startNode) {
        this.stack = [];
        if (startNode !== undefined) {
            this.push(startNode);
        }
    }
    InOrder.prototype.next = function () {
        // Will only happen if stack is empty and pop is called
        if (this.currentNode === undefined) {
            return {
                done: true,
                value: undefined,
            };
        }
        // Process this node
        if (this.i < this.currentNode.records.length) {
            return {
                done: false,
                value: this.currentNode.records[this.i++],
            };
        }
        if (this.currentNode.right !== undefined) {
            this.push(this.currentNode.right);
        }
        else {
            // Might pop the last and set this.currentNode = undefined
            this.pop();
        }
        return this.next();
    };
    InOrder.prototype.push = function (node) {
        this.currentNode = node;
        this.i = 0;
        while (this.currentNode.left !== undefined) {
            this.stack.push(this.currentNode);
            this.currentNode = this.currentNode.left;
        }
    };
    InOrder.prototype.pop = function () {
        this.currentNode = this.stack.pop();
        this.i = 0;
    };
    return InOrder;
}());
exports.InOrder = InOrder;
if (typeof Symbol === 'function') {
    InOrder.prototype[Symbol.iterator] = function () { return this; };
}
var PreOrder = /** @class */ (function () {
    function PreOrder(startNode) {
        this.stack = [];
        this.i = 0;
        this.currentNode = startNode;
    }
    PreOrder.prototype.next = function () {
        // Will only happen if stack is empty and pop is called,
        // which only happens if there is no right node (i.e we are done)
        if (this.currentNode === undefined) {
            return {
                done: true,
                value: undefined,
            };
        }
        // Process this node
        if (this.i < this.currentNode.records.length) {
            return {
                done: false,
                value: this.currentNode.records[this.i++],
            };
        }
        if (this.currentNode.right !== undefined) {
            this.push(this.currentNode.right);
        }
        if (this.currentNode.left !== undefined) {
            this.push(this.currentNode.left);
        }
        this.pop();
        return this.next();
    };
    PreOrder.prototype.push = function (node) {
        this.stack.push(node);
    };
    PreOrder.prototype.pop = function () {
        this.currentNode = this.stack.pop();
        this.i = 0;
    };
    return PreOrder;
}());
exports.PreOrder = PreOrder;
if (typeof Symbol === 'function') {
    PreOrder.prototype[Symbol.iterator] = function () { return this; };
}
//# sourceMappingURL=index.js.map

/***/ }),
/* 53 */
/***/ (function(module, exports) {

//

module.exports = function shallowEqual(objA, objB, compare, compareContext) {
  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;

  if (ret !== void 0) {
    return !!ret;
  }

  if (objA === objB) {
    return true;
  }

  if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);

  // Test for A's keys different from B.
  for (var idx = 0; idx < keysA.length; idx++) {
    var key = keysA[idx];

    if (!bHasOwnProperty(key)) {
      return false;
    }

    var valueA = objA[key];
    var valueB = objB[key];

    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;

    if (ret === false || (ret === void 0 && valueA !== valueB)) {
      return false;
    }
  }

  return true;
};


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (false) {
  module.exports = require("./production");
} else if (true) {
  module.exports = __webpack_require__(55);
} else {
  module.exports = require("./development");
}

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _common = __webpack_require__(56);

var _common2 = _interopRequireDefault(_common);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

exports.default = _common2.default;

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _entries = __webpack_require__(1);

var _entries2 = _interopRequireDefault(_entries);

var _assign = __webpack_require__(4);

var _assign2 = _interopRequireDefault(_assign);

exports.abbreviateValues = abbreviateValues;
exports.default = configureStore;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _redux = __webpack_require__(15);

var _reduxSaga = __webpack_require__(57);

var _reduxSaga2 = _interopRequireDefault(_reduxSaga);

var _reduxCliLogger = __webpack_require__(58);

var _reduxCliLogger2 = _interopRequireDefault(_reduxCliLogger);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const debug = (0, _debug2.default)("debugger:store:common");
const reduxDebug = (0, _debug2.default)("debugger:redux");

function abbreviateValues(value, options = {}, depth = 0) {
  options.stringLimit = options.stringLimit || 66;
  options.arrayLimit = options.arrayLimit || 8;
  options.recurseLimit = options.recurseLimit || 4;

  if (depth > options.recurseLimit) {
    return "...";
  }

  const recurse = child => abbreviateValues(child, options, depth + 1);

  if (value instanceof Array) {
    if (value.length > options.arrayLimit) {
      value = [...value.slice(0, options.arrayLimit / 2), "...", ...value.slice(value.length - options.arrayLimit / 2 + 1)];
    }

    return value.map(recurse);
  } else if (value instanceof Object) {
    return (0, _assign2.default)({}, ...(0, _entries2.default)(value).map(([k, v]) => ({ [recurse(k)]: recurse(v) })));
  } else if (typeof value === "string" && value.length > options.stringLimit) {
    let inner = "...";
    let extractAmount = (options.stringLimit - inner.length) / 2;
    let leading = value.slice(0, Math.ceil(extractAmount));
    let trailing = value.slice(value.length - Math.floor(extractAmount));
    return `${leading}${inner}${trailing}`;
  } else {
    return value;
  }
}

function configureStore(reducer, saga, initialState, composeEnhancers) {
  const sagaMiddleware = (0, _reduxSaga2.default)();

  if (!composeEnhancers) {
    composeEnhancers = _redux.compose;
  }

  const loggerMiddleware = (0, _reduxCliLogger2.default)({
    log: reduxDebug,
    stateTransformer: state => abbreviateValues(state, {
      arrayLimit: 4,
      recurseLimit: 3
    }),
    actionTransformer: abbreviateValues
  });

  let store = (0, _redux.createStore)(reducer, initialState, composeEnhancers((0, _redux.applyMiddleware)(sagaMiddleware, loggerMiddleware)));

  sagaMiddleware.run(saga);

  return store;
}

/***/ }),
/* 57 */
/***/ (function(module, exports) {

module.exports = require("redux-saga");

/***/ }),
/* 58 */
/***/ (function(module, exports) {

module.exports = require("redux-cli-logger");

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.saga = saga;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _effects = __webpack_require__(10);

var _helpers = __webpack_require__(5);

var _sagas = __webpack_require__(60);

var ast = _interopRequireWildcard(_sagas);

var _sagas2 = __webpack_require__(65);

var controller = _interopRequireWildcard(_sagas2);

var _sagas3 = __webpack_require__(67);

var solidity = _interopRequireWildcard(_sagas3);

var _sagas4 = __webpack_require__(68);

var evm = _interopRequireWildcard(_sagas4);

var _sagas5 = __webpack_require__(32);

var trace = _interopRequireWildcard(_sagas5);

var _sagas6 = __webpack_require__(30);

var data = _interopRequireWildcard(_sagas6);

var _sagas7 = __webpack_require__(69);

var web3 = _interopRequireWildcard(_sagas7);

var _actions = __webpack_require__(25);

var actions = _interopRequireWildcard(_actions);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const debug = (0, _debug2.default)("debugger:session:sagas");

function* saga() {
  debug("starting listeners");
  let listeners = yield* forkListeners();

  // receiving & saving contracts into state
  debug("waiting for contract information");
  let { contexts, sources } = yield (0, _effects.take)(actions.RECORD_CONTRACTS);

  debug("recording contract binaries");
  yield* recordContexts(...contexts);

  debug("recording contract sources");
  yield* recordSources(...sources);

  debug("waiting for start");
  // wait for start signal
  let { txHash, provider } = yield (0, _effects.take)(actions.START);
  debug("starting");

  // process transaction
  debug("fetching transaction info");
  let err = yield* fetchTx(txHash, provider);
  if (err) {
    debug("error %o", err);
    yield* error(err);
  } else {
    debug("visiting ASTs");
    // visit asts
    yield* ast.visitAll();

    debug("readying");
    // signal that stepping can begin
    yield* ready();

    debug("waiting for trace EOT");
    // wait until trace hits EOT
    yield* trace.wait();

    debug("finishing");
    // finish
    yield (0, _effects.put)(actions.finish());
  }

  debug("stopping listeners");
  yield (0, _effects.all)(listeners.map(task => (0, _effects.cancel)(task)));
}

exports.default = (0, _helpers.prefixName)("session", saga);

function* forkListeners() {
  return yield (0, _effects.all)([ast, controller, data, evm, solidity, trace, web3].map(app => (0, _effects.fork)(app.saga)));
}

function* fetchTx(txHash, provider) {
  let result = yield* web3.inspectTransaction(txHash, provider);

  if (result.error) {
    return result.error;
  }

  yield* evm.begin(result);

  let addresses = yield* trace.processTrace(result.trace);
  if (result.address && addresses.indexOf(result.address) == -1) {
    addresses.push(result.address);
  }

  let binaries = yield* web3.obtainBinaries(addresses);

  yield (0, _effects.all)(addresses.map((address, i) => (0, _effects.call)(recordInstance, address, binaries[i])));
}

function* recordContexts(...contexts) {
  for (let _ref of contexts) {
    let { contractName, binary, sourceMap } = _ref;

    yield* evm.addContext(contractName, binary);

    if (sourceMap) {
      yield* solidity.addSourceMap(binary, sourceMap);
    }
  }
}

function* recordSources(...sources) {
  for (let _ref2 of sources) {
    let { sourcePath, source, ast } = _ref2;

    yield* solidity.addSource(source, sourcePath, ast);
  }
}

function* recordInstance(address, binary) {
  yield* evm.addInstance(address, binary);
}

function* ready() {
  yield (0, _effects.put)(actions.ready());
}

function* error(err) {
  yield (0, _effects.put)(actions.error(err));
}

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _entries = __webpack_require__(1);

var _entries2 = _interopRequireDefault(_entries);

exports.visitAll = visitAll;
exports.saga = saga;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _effects = __webpack_require__(10);

var _helpers = __webpack_require__(5);

var _sagas = __webpack_require__(30);

var data = _interopRequireWildcard(_sagas);

var _actions = __webpack_require__(64);

var actions = _interopRequireWildcard(_actions);

var _selectors = __webpack_require__(14);

var _selectors2 = _interopRequireDefault(_selectors);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const debug = (0, _debug2.default)("debugger:ast:sagas");

function* walk(sourceId, node, pointer = "", parentId = null) {
  debug("walking %o %o", pointer, node);

  yield* handleEnter(sourceId, node, pointer, parentId);

  if (node instanceof Array) {
    for (let [i, child] of node.entries()) {
      yield (0, _effects.call)(walk, sourceId, child, `${pointer}/${i}`, parentId);
    }
  } else if (node instanceof Object) {
    for (let [key, child] of (0, _entries2.default)(node)) {
      yield (0, _effects.call)(walk, sourceId, child, `${pointer}/${key}`, node.id);
    }
  }

  yield* handleExit(sourceId, node, pointer);
}

function* handleEnter(sourceId, node, pointer, parentId) {
  if (!(node instanceof Object)) {
    return;
  }

  debug("entering %s", pointer);

  if (node.id !== undefined) {
    debug("%s recording scope %s", pointer, node.id);
    yield* data.scope(node.id, pointer, parentId, sourceId);
  }

  switch (node.nodeType) {
    case "VariableDeclaration":
      debug("%s recording variable %o", pointer, node);
      yield* data.declare(node);
      break;
  }
}

function* handleExit(sourceId, node, pointer) {
  debug("exiting %s", pointer);

  // no-op right now
}

function* walkSaga({ sourceId, ast }) {
  yield walk(sourceId, ast);
}

function* visitAll(idx) {
  let sources = yield (0, _effects.select)(_selectors2.default.views.sources);

  let tasks = yield (0, _effects.all)((0, _entries2.default)(sources).filter(([id, { ast }]) => !!ast).map(([id, { ast }]) => (0, _effects.fork)(() => (0, _effects.put)(actions.visit(id, ast)))));

  if (tasks.length > 0) {
    yield (0, _effects.join)(...tasks);
  }

  yield (0, _effects.put)(actions.doneVisiting());
}

function* saga() {
  yield (0, _effects.race)({
    visitor: (0, _effects.takeEvery)(actions.VISIT, walkSaga),
    done: (0, _effects.take)(actions.DONE_VISITING)
  });
}

exports.default = (0, _helpers.prefixName)("ast", saga);

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _entries = __webpack_require__(1);

var _entries2 = _interopRequireDefault(_entries);

var _extends2 = __webpack_require__(3);

var _extends3 = _interopRequireDefault(_extends2);

var _assign = __webpack_require__(4);

var _assign2 = _interopRequireDefault(_assign);

exports.read = read;
exports.decodeValue = decodeValue;
exports.decodeMemoryReference = decodeMemoryReference;
exports.decodeStorageReference = decodeStorageReference;
exports.decodeMapping = decodeMapping;
exports.default = decode;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _bignumber = __webpack_require__(20);

var _memory = __webpack_require__(62);

var memory = _interopRequireWildcard(_memory);

var _storage = __webpack_require__(63);

var storage = _interopRequireWildcard(_storage);

var _utils = __webpack_require__(11);

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const debug = (0, _debug2.default)("debugger:data:decode");

function read(pointer, state) {
  if (pointer.stack != undefined && state.stack && pointer.stack < state.stack.length) {
    return state.stack[pointer.stack];
  } else if (pointer.storage != undefined && state.storage) {
    return storage.readRange(state.storage, pointer.storage);
  } else if (pointer.memory != undefined && state.memory) {
    return memory.readBytes(state.memory, pointer.memory.start, pointer.memory.length);
  } else if (pointer.literal) {
    return pointer.literal;
  }
}

function decodeValue(definition, pointer, state, ...args) {
  debug("decoding value, pointer: %o, typeClass: %s", pointer, utils.typeClass(definition));
  let bytes = read(pointer, state);
  if (!bytes) {
    debug("segfault, state: %O", state);
    return undefined;
  }

  switch (utils.typeClass(definition)) {
    case "bool":
      return !utils.toBigNumber(bytes).isZero();

    case "uint":
      return utils.toBigNumber(bytes);

    case "int":
      return utils.toSignedBigNumber(bytes);

    case "address":
      return utils.toHexString(bytes, true);

    case "bytes":
      debug("typeIdentifier %s %o", utils.typeIdentifier(definition), bytes);
      let length = utils.specifiedSize(definition);
      return utils.toHexString(bytes, length);

    case "string":
      debug("typeIdentifier %s %o", utils.typeIdentifier(definition), bytes);
      return String.fromCharCode.apply(null, bytes);

    case "rational":
      debug("typeIdentifier %s %o", utils.typeIdentifier(definition), bytes);
      return utils.toBigNumber(bytes);

    default:
      debug("Unknown value type: %s", utils.typeIdentifier(definition));
      return null;
  }
}

function decodeMemoryReference(definition, pointer, state, ...args) {
  let rawValue = utils.toBigNumber(read(pointer, state)).toNumber();

  var bytes;
  switch (utils.typeClass(definition)) {

    case "bytes":
    case "string":
      bytes = read({
        memory: { start: rawValue, length: _utils.WORD_SIZE }
      }, state); // bytes contain length

      return decodeValue(definition, {
        memory: { start: rawValue + _utils.WORD_SIZE, length: bytes }
      }, state, ...args);

    case "array":
      bytes = utils.toBigNumber(read({
        memory: { start: rawValue, length: _utils.WORD_SIZE }
      }, state)).toNumber(); // bytes contain array length

      bytes = read({ memory: {
          start: rawValue + _utils.WORD_SIZE, length: bytes * _utils.WORD_SIZE
        } }, state); // now bytes contain items

      return memory.chunk(bytes, _utils.WORD_SIZE).map(chunk => decode(utils.baseDefinition(definition), {
        literal: chunk
      }, state, ...args));

    case "struct":
      let [refs] = args;
      let structDefinition = refs[definition.typeName.referencedDeclaration];
      let structVariables = structDefinition.variables || [];

      return (0, _assign2.default)({}, ...structVariables.map(({ name, id }, i) => {
        let memberDefinition = refs[id].definition;
        let memberPointer = {
          memory: { start: rawValue + i * _utils.WORD_SIZE, length: _utils.WORD_SIZE }
        };
        // let memberPointer = memory.read(state.memory, pointer + i * WORD_SIZE);

        // HACK
        memberDefinition = (0, _extends3.default)({}, memberDefinition, {

          typeDescriptions: (0, _extends3.default)({}, memberDefinition.typeDescriptions, {

            typeIdentifier: memberDefinition.typeDescriptions.typeIdentifier.replace(/_storage_/g, "_memory_")
          })
        });

        return {
          [name]: decode(memberDefinition, memberPointer, state, ...args)
        };
      }));

    default:
      debug("Unknown memory reference type: %s", utils.typeIdentifier(definition));
      return null;

  }
}

function decodeStorageReference(definition, pointer, state, ...args) {
  var data;
  var bytes;
  var length;
  var slot;

  switch (utils.typeClass(definition)) {
    case "array":
      debug("storage array! %o", pointer);
      data = read(pointer, state);
      if (!data) {
        return null;
      }

      length = utils.toBigNumber(data).toNumber();
      debug("length %o", length);

      const baseSize = utils.storageSize(utils.baseDefinition(definition));
      const perWord = Math.floor(_utils.WORD_SIZE / baseSize);
      debug("baseSize %o", baseSize);
      debug("perWord %d", perWord);

      const offset = i => {
        if (perWord == 1) {
          return i;
        }

        return Math.floor(i * baseSize / _utils.WORD_SIZE);
      };

      const index = i => {
        if (perWord == 1) {
          return _utils.WORD_SIZE - baseSize;
        }

        const position = perWord - i % perWord - 1;
        return position * baseSize;
      };

      debug("pointer: %o", pointer);
      return [...Array(length).keys()].map(i => {
        let childFrom = pointer.storage.from.offset != undefined ? {
          slot: ["0x" + utils.toBigNumber(utils.keccak256(...pointer.storage.from.slot)).plus(pointer.storage.from.offset).toString(16)],
          offset: offset(i),
          index: index(i)
        } : {
          slot: [pointer.storage.from.slot],
          offset: offset(i),
          index: index(i)
        };
        return childFrom;
      }).map((childFrom, idx) => {
        debug("childFrom %d, %o", idx, childFrom);
        return decode(utils.baseDefinition(definition), { storage: {
            from: childFrom,
            length: baseSize
          } }, state, ...args);
      });

    case "bytes":
    case "string":
      debug("string pointer %O", pointer);
      debug("storage %o", state.storage);
      data = read(pointer, state);
      if (!data) {
        return null;
      }

      debug("data %O", data);
      if (data[_utils.WORD_SIZE - 1] % 2 == 0) {
        // string lives in word, length is last byte / 2
        length = data[_utils.WORD_SIZE - 1] / 2;
        debug("in-word; length %o", length);
        if (length == 0) {
          return "";
        }

        return decodeValue(definition, { storage: {
            from: { slot: pointer.storage.from.slot, index: 0 },
            to: { slot: pointer.storage.from.slot, index: length - 1 }
          } }, state, ...args);
      } else {
        length = utils.toBigNumber(data).minus(1).div(2).toNumber();
        debug("new-word, length %o", length);

        return decodeValue(definition, { storage: {
            from: { slot: [pointer.storage.from.slot], index: 0 },
            length
          } }, state, ...args);
      }

    case "struct":
      let [refs] = args;

      return (0, _assign2.default)({}, ...(0, _entries2.default)(pointer.storage.children).map(([id, childPointer]) => ({
        [childPointer.name]: decode(refs[id].definition, { storage: childPointer }, state, ...args)
      })));

    default:
      debug("Unknown storage reference type: %s", utils.typeIdentifier(definition));
      return undefined;
  }
}

function decodeMapping(definition, pointer, ...args) {
  if (definition.referencedDeclaration) {
    // attempting to decode reference to mapping, thus missing valid pointer
    return undefined;
  }
  debug("mapping %O", pointer);
  debug("mapping definition %O", definition);
  let { keys } = pointer;
  keys = keys || [];
  debug("known keys %o", keys);

  let keyDefinition = definition.typeName.keyType;
  let valueDefinition = definition.typeName.valueType;

  let baseSlot = pointer.storage.from.slot;
  if (!Array.isArray(baseSlot)) {
    baseSlot = [baseSlot];
  }

  let mapping = {};
  debug("mapping %O", mapping);
  for (let key of keys) {
    let keyPointer = { "literal": key };
    let valuePointer = {
      storage: {
        from: {
          slot: [key, ...baseSlot],
          index: 0
        },
        to: {
          slot: [key, ...baseSlot],
          index: 31
        }
      }
    };

    // NOTE mapping keys are potentially lossy because JS only likes strings
    let keyValue = decode(keyDefinition, keyPointer, ...args).toString();

    mapping[keyValue] = decode(valueDefinition, valuePointer, ...args);
  }

  return mapping;
}

function decode(definition, ...args) {
  const identifier = utils.typeIdentifier(definition);
  if (utils.isReference(definition)) {
    switch (utils.referenceType(definition)) {
      case "memory":
        debug("decoding memory reference, type: %s", identifier);
        return decodeMemoryReference(definition, ...args);
      case "storage":
        debug("decoding storage reference, type: %s", identifier);
        return decodeStorageReference(definition, ...args);
      default:
        debug("Unknown reference category: %s", utils.typeIdentifier(definition));
        return undefined;
    }
  }

  if (utils.isMapping(definition)) {
    debug("decoding mapping, type: %s", identifier);
    return decodeMapping(definition, ...args);
  }

  debug("decoding value, type: %s", identifier);
  return decodeValue(definition, ...args);
}

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.read = read;
exports.readBytes = readBytes;
exports.chunk = chunk;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _bignumber = __webpack_require__(20);

var _utils = __webpack_require__(11);

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const debug = (0, _debug2.default)("debugger:data:decode:memory");

/**
 * read word from memory
 *
 * requires `byte` to be a multiple of WORD_SIZE (32)
 *
 * @param memory - Uint8Array
 * @return {BigNumber}
 */
function read(memory, byte) {
  return readBytes(memory, byte, _utils.WORD_SIZE);
}

/**
 * read <bytes> amount of bytes from memory, starting at byte <start>
 *
 * @param memory - Uint8Array
 */
function readBytes(memory, byte, length) {
  byte = utils.toBigNumber(byte);
  length = utils.toBigNumber(length);

  if (byte.toNumber() >= memory.length) {
    return new Uint8Array(length ? length.toNumber() : 0);
  }

  if (length == undefined) {
    return new Uint8Array(memory.buffer, byte.toNumber());
  }

  // grab `length` bytes no matter what, here fill this array
  var bytes = new Uint8Array(length.toNumber());

  // if we're reading past the end of memory, truncate the length to read
  let excess = byte.plus(length).minus(memory.length).toNumber();
  if (excess > 0) {
    length = new _bignumber.BigNumber(memory.length).minus(byte);
  }

  let existing = new Uint8Array(memory.buffer, byte.toNumber(), length.toNumber());

  bytes.set(existing);

  return bytes;
}

/**
 * Split memory into chunks
 */
function chunk(memory, size = _utils.WORD_SIZE) {
  let chunks = [];

  for (let i = 0; i < memory.length; i += size) {
    let chunk = readBytes(memory, i, size);
    chunks.push(chunk);
  }

  return chunks;
}

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = __webpack_require__(3);

var _extends3 = _interopRequireDefault(_extends2);

exports.slotAddress = slotAddress;
exports.read = read;
exports.readRange = readRange;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _utils = __webpack_require__(11);

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const debug = (0, _debug2.default)("debugger:data:decode:storage");

/**
 * convert a slot to a word corresponding to actual storage address
 *
 * if `slot` is an array, return hash of array values.
 * if `slot` array is nested, recurse on sub-arrays
 *
 * @param slot - number or possibly-nested array of numbers
 */
function slotAddress(slot) {
  if (slot instanceof Array) {
    return utils.keccak256(...slot.map(slotAddress));
  } else {
    return utils.toBigNumber(slot);
  }
}

/**
 * read slot from storage
 *
 * @param slot - big number or array of regular numbers
 * @param offset - for array, offset from the keccak determined location
 */
function read(storage, slot, offset = 0) {
  const address = slotAddress(slot).plus(offset);

  debug("reading slot: %o", utils.toHexString(address));

  let word = storage[utils.toHexString(address, _utils.WORD_SIZE)] || new Uint8Array(_utils.WORD_SIZE);

  debug("word %o", word);
  return word;
}

/**
 * read all bytes in some range.
 *
 * parameters `from` and `to` are objects with the following properties:
 *
 *   slot - (required) either a bignumber or a "path" array of integer offsets
 *
 *     path array values get converted into keccak256 hash as per solidity
 *     storage allocation method
 *
 *     ref: https://solidity.readthedocs.io/en/v0.4.23/miscellaneous.html#layout-of-state-variables-in-storage
 *     (search "concatenation")
 *
 *  offset - (default: 0) slot offset
 *
 *  index - (default: 0) byte index in word
 *
 * @param from - location (see ^)
 * @param to - location (see ^). inclusive.
 * @param length - instead of `to`, number of bytes after `from`
 */
function readRange(storage, { from, to, length }) {
  if (!length && !to || length && to) {
    throw new Error("must specify exactly one `to`|`length`");
  }

  from = (0, _extends3.default)({}, from, {
    offset: from.offset || 0
  });

  if (length) {
    to = {
      slot: from.slot,
      offset: from.offset + Math.floor((from.index + length - 1) / _utils.WORD_SIZE),
      index: (from.index + length - 1) % _utils.WORD_SIZE
    };
  } else {
    to = (0, _extends3.default)({}, to, {
      offset: to.offset || 0
    });
  }

  debug("readRange %o", { from, to });

  const totalWords = to.offset - from.offset + 1;
  debug("totalWords %o", totalWords);

  let data = new Uint8Array(totalWords * _utils.WORD_SIZE);

  for (let i = 0; i < totalWords; i++) {
    let offset = i + from.offset;
    data.set(read(storage, from.slot, offset), i * _utils.WORD_SIZE);
  }
  debug("words %o", data);

  data = data.slice(from.index, (totalWords - 1) * _utils.WORD_SIZE + to.index + 1);

  debug("data: %o", data);

  return data;
}

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.visit = visit;
exports.doneVisiting = doneVisiting;
const VISIT = exports.VISIT = "VISIT";
function visit(sourceId, ast) {
  return {
    type: VISIT,
    sourceId, ast
  };
}

const DONE_VISITING = exports.DONE_VISITING = "DONE_VISITING";
function doneVisiting() {
  return {
    type: DONE_VISITING
  };
}

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _keys = __webpack_require__(17);

var _keys2 = _interopRequireDefault(_keys);

var _set = __webpack_require__(22);

var _set2 = _interopRequireDefault(_set);

exports.saga = saga;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _effects = __webpack_require__(10);

var _helpers = __webpack_require__(5);

var _sagas = __webpack_require__(32);

var trace = _interopRequireWildcard(_sagas);

var _actions = __webpack_require__(29);

var actions = _interopRequireWildcard(_actions);

var _selectors = __webpack_require__(66);

var _selectors2 = _interopRequireDefault(_selectors);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const debug = (0, _debug2.default)("debugger:controller:sagas");

const CONTROL_SAGAS = {
  [actions.ADVANCE]: advance,
  [actions.STEP_NEXT]: stepNext,
  [actions.STEP_OVER]: stepOver,
  [actions.STEP_INTO]: stepInto,
  [actions.STEP_OUT]: stepOut,
  [actions.CONTINUE_UNTIL]: continueUntil
};

/** AST node types that are skipped to filter out some noise */
const SKIPPED_TYPES = new _set2.default(["ContractDefinition", "VariableDeclaration"]);

function* saga() {
  while (true) {
    debug("waiting for control action");
    let action = yield (0, _effects.take)((0, _keys2.default)(CONTROL_SAGAS));
    debug("got control action");
    let saga = CONTROL_SAGAS[action.type];

    yield (0, _effects.put)(actions.beginStep(action.type));

    yield (0, _effects.race)({
      exec: (0, _effects.call)(saga, action),
      interrupt: (0, _effects.take)(actions.INTERRUPT)
    });
  }
}

exports.default = (0, _helpers.prefixName)("controller", saga);

/**
 * Advance the state by one instruction
 */

function* advance() {
  // send action to advance trace
  yield* trace.advance();
}

/**
 * stepNext - step to the next logical code segment
 *
 * Note: It might take multiple instructions to express the same section of code.
 * "Stepping", then, is stepping to the next logical item, not stepping to the next
 * instruction. See advance() if you'd like to advance by one instruction.
 */
function* stepNext() {
  const startingRange = yield (0, _effects.select)(_selectors2.default.current.location.sourceRange);

  var upcoming;

  do {
    // advance at least once step
    yield* advance();

    // and check the next source range
    upcoming = yield (0, _effects.select)(_selectors2.default.current.location);

    // if the next step's source range is still the same, keep going
  } while (!upcoming.node || SKIPPED_TYPES.has(upcoming.node.nodeType) || upcoming.sourceRange.start == startingRange.start && upcoming.sourceRange.length == startingRange.length);
}

/**
 * stepInto - step into the current function
 *
 * Conceptually this is easy, but from a programming standpoint it's hard.
 * Code like `getBalance(msg.sender)` might be highlighted, but there could
 * be a number of different intermediate steps (like evaluating `msg.sender`)
 * before `getBalance` is stepped into. This function will step into the first
 * function available (where instruction.jump == "i"), ignoring any intermediate
 * steps that fall within the same code range. If there's a step encountered
 * that exists outside of the range, then stepInto will only execute until that
 * step.
 */
function* stepInto() {
  if (yield (0, _effects.select)(_selectors2.default.current.willJump)) {
    yield* stepNext();

    return;
  }

  if (yield (0, _effects.select)(_selectors2.default.current.location.isMultiline)) {
    yield* stepOver();

    return;
  }

  const startingDepth = yield (0, _effects.select)(_selectors2.default.current.functionDepth);
  const startingRange = yield (0, _effects.select)(_selectors2.default.current.location.sourceRange);
  var currentDepth;
  var currentRange;

  do {
    yield* stepNext();

    currentDepth = yield (0, _effects.select)(_selectors2.default.current.functionDepth);
    currentRange = yield (0, _effects.select)(_selectors2.default.current.location.sourceRange);
  } while (
  // the function stack has not increased,
  currentDepth <= startingDepth &&

  // the current source range begins on or after the starting range
  currentRange.start >= startingRange.start &&

  // and the current range ends on or before the starting range ends
  currentRange.start + currentRange.length <= startingRange.start + startingRange.length);
}

/**
 * Step out of the current function
 *
 * This will run until the debugger encounters a decrease in function depth.
 */
function* stepOut() {
  if (yield (0, _effects.select)(_selectors2.default.current.location.isMultiline)) {
    yield* stepOver();

    return;
  }

  const startingDepth = yield (0, _effects.select)(_selectors2.default.current.functionDepth);
  var currentDepth;

  do {
    yield* stepNext();

    currentDepth = yield (0, _effects.select)(_selectors2.default.current.functionDepth);
  } while (currentDepth >= startingDepth);
}

/**
 * stepOver - step over the current line
 *
 * Step over the current line. This will step to the next instruction that
 * exists on a different line of code within the same function depth.
 */
function* stepOver() {
  const startingDepth = yield (0, _effects.select)(_selectors2.default.current.functionDepth);
  const startingRange = yield (0, _effects.select)(_selectors2.default.current.location.sourceRange);
  var currentDepth;
  var currentRange;

  do {
    yield* stepNext();

    currentDepth = yield (0, _effects.select)(_selectors2.default.current.functionDepth);
    currentRange = yield (0, _effects.select)(_selectors2.default.current.location.sourceRange);
  } while (
  // keep stepping provided:
  //
  // we haven't jumped out
  !(currentDepth < startingDepth) && (

  // either: function depth is greater than starting (ignore function calls)
  // or, if we're at the same depth, keep stepping until we're on a new
  // line.
  currentDepth > startingDepth || currentRange.lines.start.line == startingRange.lines.start.line));
}

/**
 * continueUntil - step through execution until a breakpoint
 *
 * @param breakpoints - array of breakpoints ({ ...call, line })
 */
function* continueUntil({ breakpoints }) {
  var currentCall;
  var currentLocation;

  let breakpointHit = false;

  do {
    yield* stepNext();

    currentCall = yield (0, _effects.select)(_selectors2.default.current.executionContext);
    currentLocation = yield (0, _effects.select)(_selectors2.default.current.location);

    breakpointHit = breakpoints.filter(({ address, binary, line, node }) => (address == currentCall.address || binary == currentCall.binary) && (line == currentLocation.sourceRange.lines.start.line || node == currentLocation.node.id)).length > 0;
  } while (!breakpointHit);
}

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _reselectTree = __webpack_require__(9);

var _selectors = __webpack_require__(2);

var _selectors2 = _interopRequireDefault(_selectors);

var _selectors3 = __webpack_require__(6);

var _selectors4 = _interopRequireDefault(_selectors3);

var _selectors5 = __webpack_require__(14);

var _selectors6 = _interopRequireDefault(_selectors5);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const debug = (0, _debug2.default)("debugger:controller:sagas");

/**
 * @private
 */
const identity = x => x;

/**
 * controller
 */
const controller = (0, _reselectTree.createSelectorTree)({

  /**
   * controller.current
   */
  current: {
    /**
     * controller.current.functionDepth
     */
    functionDepth: (0, _reselectTree.createLeaf)([_selectors4.default.current.functionDepth], identity),

    /**
     * controller.current.executionContext
     */
    executionContext: (0, _reselectTree.createLeaf)([_selectors2.default.current.call], identity),

    /**
     * controller.current.willJump
     */
    willJump: (0, _reselectTree.createLeaf)([_selectors2.default.current.step.isJump], identity),

    /**
     * controller.current.location
     */
    location: {
      /**
       * controller.current.location.sourceRange
       */
      sourceRange: (0, _reselectTree.createLeaf)([_selectors4.default.current.sourceRange], identity),

      /**
       * controller.current.location.node
       */
      node: (0, _reselectTree.createLeaf)([_selectors6.default.current.node], identity),

      /**
       * controller.current.location.isMultiline
       */
      isMultiline: (0, _reselectTree.createLeaf)([_selectors4.default.current.isMultiline], identity)
    }
  }
});

exports.default = controller;

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addSource = addSource;
exports.addSourceMap = addSourceMap;
exports.saga = saga;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _effects = __webpack_require__(10);

var _helpers = __webpack_require__(5);

var _actions = __webpack_require__(33);

var actions = _interopRequireWildcard(_actions);

var _actions2 = __webpack_require__(21);

var _selectors = __webpack_require__(6);

var _selectors2 = _interopRequireDefault(_selectors);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const debug = (0, _debug2.default)("debugger:solidity:sagas");

function* addSource(source, sourcePath, ast) {
  yield (0, _effects.put)(actions.addSource(source, sourcePath, ast));
}

function* addSourceMap(binary, sourceMap) {
  yield (0, _effects.put)(actions.addSourceMap(binary, sourceMap));
}

function* functionDepthSaga() {
  while (true) {
    yield (0, _effects.take)(_actions2.TICK);
    debug("got TICK");
    let instruction = yield (0, _effects.select)(_selectors2.default.current.instruction);
    debug("instruction: %o", instruction);

    if (yield (0, _effects.select)(_selectors2.default.current.willJump)) {
      let jumpDirection = yield (0, _effects.select)(_selectors2.default.current.jumpDirection);

      yield (0, _effects.put)(actions.jump(jumpDirection));
    }
  }
}

function* saga() {
  yield (0, _effects.call)(functionDepthSaga);
}

exports.default = (0, _helpers.prefixName)("solidity", saga);

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addContext = addContext;
exports.addInstance = addInstance;
exports.begin = begin;
exports.callstackSaga = callstackSaga;
exports.saga = saga;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _effects = __webpack_require__(10);

var _helpers = __webpack_require__(5);

var _actions = __webpack_require__(21);

var _actions2 = __webpack_require__(34);

var actions = _interopRequireWildcard(_actions2);

var _selectors = __webpack_require__(2);

var _selectors2 = _interopRequireDefault(_selectors);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const debug = (0, _debug2.default)("debugger:evm:sagas");

/**
 * Adds EVM bytecode context
 *
 * @return {string} ID (0x-prefixed keccak of binary)
 */
function* addContext(contractName, binary) {
  yield (0, _effects.put)(actions.addContext(contractName, binary));

  return (0, _helpers.keccak256)(binary);
}

/**
 * Adds known deployed instance of binary at address
 *
 * @return {string} ID (0x-prefixed keccak of binary)
 */
function* addInstance(address, binary) {
  let search = yield (0, _effects.select)(_selectors2.default.info.binaries.search);
  if (binary != "0x0") {
    let { context } = search(binary);

    yield (0, _effects.put)(actions.addInstance(address, context, binary));

    return context;
  }
}

function* begin({ address, binary }) {
  if (address) {
    yield (0, _effects.put)(actions.call(address));
  } else {
    yield (0, _effects.put)(actions.create(binary));
  }
}

function* callstackSaga() {
  while (true) {
    yield (0, _effects.take)(_actions.TICK);
    debug("got TICK");

    if (yield (0, _effects.select)(_selectors2.default.current.step.isCall)) {
      debug("got call");
      let address = yield (0, _effects.select)(_selectors2.default.current.step.callAddress);

      yield (0, _effects.put)(actions.call(address));
    } else if (yield (0, _effects.select)(_selectors2.default.current.step.isCreate)) {
      debug("got create");
      let binary = yield (0, _effects.select)(_selectors2.default.current.step.createBinary);

      yield (0, _effects.put)(actions.create(binary));
    } else if (yield (0, _effects.select)(_selectors2.default.current.step.isHalting)) {
      debug("got return");
      yield (0, _effects.put)(actions.returnCall());
    }
  }
}

function* saga() {
  yield (0, _effects.call)(callstackSaga);
}

exports.default = (0, _helpers.prefixName)("evm", saga);

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inspectTransaction = inspectTransaction;
exports.obtainBinaries = obtainBinaries;
exports.saga = saga;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _effects = __webpack_require__(10);

var _helpers = __webpack_require__(5);

var _actions = __webpack_require__(70);

var actions = _interopRequireWildcard(_actions);

var _adapter = __webpack_require__(71);

var _adapter2 = _interopRequireDefault(_adapter);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const debug = (0, _debug2.default)("debugger:web3:sagas");

function* fetchTransactionInfo(adapter, { txHash }) {
  debug("inspecting transaction");
  var trace;
  try {
    trace = yield (0, _effects.apply)(adapter, adapter.getTrace, [txHash]);
  } catch (e) {
    debug("putting error");
    yield (0, _effects.put)(actions.error(e));
    return;
  }

  debug("got trace");
  yield (0, _effects.put)(actions.receiveTrace(trace));

  let tx = yield (0, _effects.apply)(adapter, adapter.getTransaction, [txHash]);
  if (tx.to && tx.to != "0x0") {
    yield (0, _effects.put)(actions.receiveCall({ address: tx.to }));
    return;
  }

  let receipt = yield (0, _effects.apply)(adapter, adapter.getReceipt, [txHash]);
  if (receipt.contractAddress) {
    yield (0, _effects.put)(actions.receiveCall({ binary: tx.input }));
    return;
  }

  throw new Error("Could not find contract associated with transaction. " + "Please make sure you're debugging a transaction that executes a " + "contract function or creates a new contract.");
}

function* fetchBinary(adapter, { address }) {
  debug("fetching binary for %s", address);
  let binary = yield (0, _effects.apply)(adapter, adapter.getDeployedCode, [address]);

  debug("received binary for %s", address);
  yield (0, _effects.put)(actions.receiveBinary(address, binary));
}

function* inspectTransaction(txHash, provider) {
  yield (0, _effects.put)(actions.init(provider));
  yield (0, _effects.put)(actions.inspect(txHash));

  let action = yield (0, _effects.take)(({ type }) => type == actions.RECEIVE_TRACE || type == actions.ERROR_WEB3);
  debug("action %o", action);

  var trace;
  if (action.type == actions.RECEIVE_TRACE) {
    trace = action.trace;
    debug("received trace");
  } else {
    return { error: action.error };
  }

  let { address, binary } = yield (0, _effects.take)(actions.RECEIVE_CALL);
  debug("received call");

  return { trace, address, binary };
}

function* obtainBinaries(addresses) {
  let tasks = yield (0, _effects.all)(addresses.map(address => (0, _effects.fork)(receiveBinary, address)));

  debug("requesting binaries");
  yield (0, _effects.all)(addresses.map(address => (0, _effects.put)(actions.fetchBinary(address))));

  let binaries = [];
  binaries = yield (0, _effects.all)(tasks.map(task => (0, _effects.join)(task)));

  debug("binaries %o", binaries);

  return binaries;
}

function* receiveBinary(address) {
  let { binary } = yield (0, _effects.take)(action => action.type == actions.RECEIVE_BINARY && action.address == address);
  debug("got binary for %s", address);

  return binary;
}

function* saga() {
  // wait for web3 init signal
  let { provider } = yield (0, _effects.take)(actions.INIT_WEB3);
  let adapter = new _adapter2.default(provider);

  yield (0, _effects.takeEvery)(actions.INSPECT, fetchTransactionInfo, adapter);
  yield (0, _effects.takeEvery)(actions.FETCH_BINARY, fetchBinary, adapter);
}

exports.default = (0, _helpers.prefixName)("web3", saga);

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.init = init;
exports.inspect = inspect;
exports.fetchBinary = fetchBinary;
exports.receiveBinary = receiveBinary;
exports.receiveTrace = receiveTrace;
exports.receiveCall = receiveCall;
exports.error = error;
const INIT_WEB3 = exports.INIT_WEB3 = "INIT_WEB3";
function init(provider) {
  return {
    type: INIT_WEB3,
    provider
  };
}

const INSPECT = exports.INSPECT = "INSPECT_TRANSACTION";
function inspect(txHash) {
  return {
    type: INSPECT,
    txHash
  };
}

const FETCH_BINARY = exports.FETCH_BINARY = "FETCH_BINARY";
function fetchBinary(address) {
  return {
    type: FETCH_BINARY,
    address
  };
}

const RECEIVE_BINARY = exports.RECEIVE_BINARY = "RECEIVE_BINARY";
function receiveBinary(address, binary) {
  return {
    type: RECEIVE_BINARY,
    address, binary
  };
}

const RECEIVE_TRACE = exports.RECEIVE_TRACE = "RECEIVE_TRACE";
function receiveTrace(trace) {
  return {
    type: RECEIVE_TRACE,
    trace
  };
}

const RECEIVE_CALL = exports.RECEIVE_CALL = "RECEIVE_CALL";
function receiveCall({ address, binary }) {
  return {
    type: RECEIVE_CALL,
    address, binary
  };
}

const ERROR_WEB3 = exports.ERROR_WEB3 = "ERROR_WEB3";
function error(error) {
  return {
    type: ERROR_WEB3,
    error
  };
}

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = __webpack_require__(23);

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = __webpack_require__(7);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _web = __webpack_require__(8);

var _web2 = _interopRequireDefault(_web);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const debug = (0, _debug2.default)("debugger:web3:adapter");

class Web3Adapter {
  constructor(provider) {
    this.web3 = new _web2.default(provider);
  }

  getTrace(txHash) {
    var _this = this;

    return (0, _asyncToGenerator3.default)(function* () {
      return new _promise2.default(function (accept, reject) {
        _this.web3.currentProvider.send({
          jsonrpc: "2.0",
          method: "debug_traceTransaction",
          params: [txHash, {}],
          id: new Date().getTime()
        }, function (err, result) {
          if (err) return reject(err);
          if (result.error) return reject(new Error(result.error.message));
          debug("result: %o", result);
          accept(result.result.structLogs);
        });
      });
    })();
  }

  getTransaction(txHash) {
    var _this2 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      return new _promise2.default(function (accept, reject) {
        _this2.web3.eth.getTransaction(txHash, function (err, tx) {
          if (err) return reject(err);

          return accept(tx);
        });
      });
    })();
  }

  getReceipt(txHash) {
    var _this3 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      return new _promise2.default(function (accept, reject) {
        _this3.web3.eth.getTransactionReceipt(txHash, function (err, receipt) {
          if (err) return reject(err);

          return accept(receipt);
        });
      });
    })();
  }

  /**
   * getDeployedCode - get the deployed code for an address from the client
   * @param  {String} address
   * @return {String}         deployedBinary
   */
  getDeployedCode(address) {
    var _this4 = this;

    return (0, _asyncToGenerator3.default)(function* () {
      debug("getting deployed code for %s", address);
      return new _promise2.default(function (accept, reject) {
        _this4.web3.eth.getCode(address, function (err, deployedBinary) {
          if (err) debug("error: %o", err);
          if (err) return reject(err);
          debug("got deployed code for %s", address);
          accept(deployedBinary);
        });
      });
    })();
  }
}
exports.default = Web3Adapter;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FINISHED = exports.ERROR = exports.ACTIVE = exports.WAITING = undefined;
exports.session = session;

var _redux = __webpack_require__(15);

var _reducers = __webpack_require__(73);

var _reducers2 = _interopRequireDefault(_reducers);

var _reducers3 = __webpack_require__(74);

var _reducers4 = _interopRequireDefault(_reducers3);

var _reducers5 = __webpack_require__(76);

var _reducers6 = _interopRequireDefault(_reducers5);

var _reducers7 = __webpack_require__(77);

var _reducers8 = _interopRequireDefault(_reducers7);

var _actions = __webpack_require__(25);

var actions = _interopRequireWildcard(_actions);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const WAITING = exports.WAITING = "WAITING";
const ACTIVE = exports.ACTIVE = "ACTIVE";
const ERROR = exports.ERROR = "ERROR";
const FINISHED = exports.FINISHED = "FINISHED";

function session(state = WAITING, action) {
  switch (action.type) {
    case actions.READY:
      return ACTIVE;

    case actions.ERROR:
      return { error: action.error };

    case actions.FINISH:
      return FINISHED;

    default:
      return state;
  }
}

const reduceState = (0, _redux.combineReducers)({
  session,
  data: _reducers2.default,
  evm: _reducers4.default,
  solidity: _reducers6.default,
  trace: _reducers8.default
});

exports.default = reduceState;

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _entries = __webpack_require__(1);

var _entries2 = _interopRequireDefault(_entries);

var _assign = __webpack_require__(4);

var _assign2 = _interopRequireDefault(_assign);

var _extends2 = __webpack_require__(3);

var _extends3 = _interopRequireDefault(_extends2);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _redux = __webpack_require__(15);

var _actions = __webpack_require__(31);

var actions = _interopRequireWildcard(_actions);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const debug = (0, _debug2.default)("debugger:data:reducers");

const DEFAULT_SCOPES = {
  byId: {}
};

function scopes(state = DEFAULT_SCOPES, action) {
  var context;
  var scope;
  var variables;

  switch (action.type) {
    case actions.SCOPE:
      scope = state.byId[action.id] || {};

      return {
        byId: (0, _extends3.default)({}, state.byId, {

          [action.id]: (0, _extends3.default)({}, scope, {

            id: action.id,
            sourceId: action.sourceId,
            parentId: action.parentId,
            pointer: action.pointer
          })
        })
      };

    case actions.DECLARE:
      scope = state.byId[action.node.scope] || {};
      variables = scope.variables || [];

      return {
        byId: (0, _extends3.default)({}, state.byId, {

          [action.node.scope]: (0, _extends3.default)({}, scope, {

            variables: [...variables, { name: action.node.name, id: action.node.id }]
          })
        })
      };

    default:
      return state;
  }
}

const info = (0, _redux.combineReducers)({
  scopes
});

const DEFAULT_ASSIGNMENTS = {
  byId: {}
};

function assignments(state = DEFAULT_ASSIGNMENTS, action) {
  switch (action.type) {
    case actions.ASSIGN:
      return {
        byId: (0, _extends3.default)({}, state.byId, (0, _assign2.default)({}, ...(0, _entries2.default)(action.assignments).map(([id, ref]) => ({
          [id]: (0, _extends3.default)({}, state.byId[id], {
            ref
          })
        }))))
      };

    default:
      return state;
  }
};

const proc = (0, _redux.combineReducers)({
  assignments
});

const reducer = (0, _redux.combineReducers)({
  info,
  proc
});

exports.default = reducer;

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _set = __webpack_require__(22);

var _set2 = _interopRequireDefault(_set);

var _from = __webpack_require__(75);

var _from2 = _interopRequireDefault(_from);

var _extends2 = __webpack_require__(3);

var _extends3 = _interopRequireDefault(_extends2);

exports.callstack = callstack;

var _redux = __webpack_require__(15);

var _actions = __webpack_require__(34);

var actions = _interopRequireWildcard(_actions);

var _helpers = __webpack_require__(5);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const DEFAULT_CONTEXTS = {
  byContext: {},
  byBinary: {}
};

function contexts(state = DEFAULT_CONTEXTS, action) {
  switch (action.type) {
    /*
     * Adding a new context
     */
    case actions.ADD_CONTEXT:
      let { contractName, binary } = action;

      if (state.byBinary[binary]) {
        return state;
      }

      let context = (0, _helpers.keccak256)(binary);

      return {
        byContext: (0, _extends3.default)({}, state.byContext, {

          [context]: { context, binary, contractName }
        }),

        byBinary: (0, _extends3.default)({}, state.byBinary, {

          [binary]: { context: context }
        })
      };

    /*
     * Default case
     */
    default:
      return state;
  }
}

const DEFAULT_INSTANCES = {
  byAddress: {},
  byContext: {}
};

function instances(state = DEFAULT_INSTANCES, action) {
  switch (action.type) {
    /*
     * Adding a new address for context
     */
    case actions.ADD_INSTANCE:
      let { address, context, binary } = action;

      // get known addresses for this context
      let otherInstances = state.byContext[context] || [];
      let otherAddresses = otherInstances.map(({ address }) => address);

      return {
        byAddress: (0, _extends3.default)({}, state.byAddress, {

          [address]: { context, binary }
        }),

        byContext: (0, _extends3.default)({}, state.byContext, {

          // reconstruct context instances to include new address
          [context]: (0, _from2.default)(new _set2.default(otherAddresses).add(address)).map(address => ({ address }))
        })
      };

    /*
     * Default case
     */
    default:
      return state;
  }
}

const info = (0, _redux.combineReducers)({
  contexts,
  instances
});

function callstack(state = [], action) {
  switch (action.type) {
    case actions.CALL:
      let address = action.address;
      return state.concat([{ address }]);

    case actions.CREATE:
      const binary = action.binary;
      return state.concat([{ binary }]);

    case actions.RETURN:
      return state.slice(0, -1); // pop

    default:
      return state;
  };
}

const proc = (0, _redux.combineReducers)({
  callstack
});

const reducer = (0, _redux.combineReducers)({
  info,
  proc
});

exports.default = reducer;

/***/ }),
/* 75 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/array/from");

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = __webpack_require__(3);

var _extends3 = _interopRequireDefault(_extends2);

var _keys = __webpack_require__(17);

var _keys2 = _interopRequireDefault(_keys);

exports.functionDepth = functionDepth;

var _redux = __webpack_require__(15);

var _helpers = __webpack_require__(5);

var _actions = __webpack_require__(33);

var actions = _interopRequireWildcard(_actions);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const DEFAULT_SOURCES = {
  byId: {}
};

function sources(state = DEFAULT_SOURCES, action) {
  switch (action.type) {
    /*
     * Adding a new source
     */
    case actions.ADD_SOURCE:
      let { ast, source, sourcePath } = action;

      let id = (0, _keys2.default)(state.byId).length;

      return {
        byId: (0, _extends3.default)({}, state.byId, {

          [id]: {
            id,
            ast,
            source,
            sourcePath
          }
        })

        /*
         * Default case
         */
      };default:
      return state;
  }
}

const DEFAULT_SOURCEMAPS = {
  byContext: {}
};

function sourceMaps(state = DEFAULT_SOURCEMAPS, action) {
  switch (action.type) {
    /*
     * Adding a new sourceMap
     */
    case actions.ADD_SOURCEMAP:
      let { binary, sourceMap } = action;
      let context = (0, _helpers.keccak256)(binary);

      return {
        byContext: (0, _extends3.default)({}, state.byContext, {

          [context]: {
            context,
            sourceMap
          }
        })
      };

    /*
     * Default Case
     */
    default:
      return state;
  }
}

const info = (0, _redux.combineReducers)({
  sources,
  sourceMaps
});

function functionDepth(state = 1, action) {
  if (action.type === actions.JUMP) {
    const delta = spelunk(action.jumpDirection);
    return state + delta;
  } else {
    return state;
  }
}

function spelunk(jump) {
  if (jump == "i") {
    return 1;
  } else if (jump == "o") {
    return -1;
  } else {
    return 0;
  }
}

const proc = (0, _redux.combineReducers)({
  functionDepth
});

const reducer = (0, _redux.combineReducers)({
  info,
  proc
});

exports.default = reducer;

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.index = index;
exports.steps = steps;

var _redux = __webpack_require__(15);

var _actions = __webpack_require__(21);

var actions = _interopRequireWildcard(_actions);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function index(state = 0, action) {
  if (action.type == actions.TOCK || action.type == actions.END_OF_TRACE) {
    return state + 1;
  } else {
    return state;
  }
}

function steps(state = null, action) {
  if (action.type == actions.SAVE_STEPS) {
    return action.steps;
  } else {
    return state;
  }
}

const info = (0, _redux.combineReducers)({
  steps
});

const proc = (0, _redux.combineReducers)({
  index
});

const reducer = (0, _redux.combineReducers)({
  info,
  proc
});

exports.default = reducer;

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _keys = __webpack_require__(17);

var _keys2 = _interopRequireDefault(_keys);

var _asyncToGenerator2 = __webpack_require__(7);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _chai = __webpack_require__(12);

var _ganacheCli = __webpack_require__(16);

var _ganacheCli2 = _interopRequireDefault(_ganacheCli);

var _web = __webpack_require__(8);

var _web2 = _interopRequireDefault(_web);

var _helpers = __webpack_require__(13);

var _debugger = __webpack_require__(18);

var _debugger2 = _interopRequireDefault(_debugger);

var _selectors = __webpack_require__(35);

var _selectors2 = _interopRequireDefault(_selectors);

var _selectors3 = __webpack_require__(19);

var _selectors4 = _interopRequireDefault(_selectors3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("test:context");

const __OUTER = `
pragma solidity ^0.4.18;

import "./InnerContract.sol";

contract OuterContract {
  event Outer();

  InnerContract inner;

  function OuterContract(address _inner) public {
    inner = InnerContract(_inner);
  }

  function run() public {
    inner.run();

    Outer();
  }
}
`;

const __INNER = `
pragma solidity ^0.4.18;

contract InnerContract {
  event Inner();

  function run() public {
    Inner();
  }
}
`;

const __MIGRATION = `
let OuterContract = artifacts.require("OuterContract");
let InnerContract = artifacts.require("InnerContract");

module.exports = function(deployer) {
  return deployer
    .then(function() {
      return deployer.deploy(InnerContract);
    })
    .then(function() {
      return InnerContract.deployed();
    })
    .then(function(inner) {
      return deployer.deploy(OuterContract, inner.address);
    });
};
`;

let migrations = {
  "2_deploy_contracts.js": __MIGRATION
};

let sources = {
  "OuterLibrary.sol": __OUTER,
  "InnerContract.sol": __INNER
};

describe("Contexts", function () {
  var provider;
  var web3;

  var abstractions;
  var artifacts;

  before("Create Provider", (0, _asyncToGenerator3.default)(function* () {
    provider = _ganacheCli2.default.provider({ seed: "debugger", gasLimit: 7000000 });
    web3 = new _web2.default(provider);
  }));

  before("Prepare contracts and artifacts", (0, _asyncToGenerator3.default)(function* () {
    this.timeout(30000);

    let prepared = yield (0, _helpers.prepareContracts)(provider, sources, migrations);
    abstractions = prepared.abstractions;
    artifacts = prepared.artifacts;
  }));

  it("returns view of addresses affected", (0, _asyncToGenerator3.default)(function* () {
    let outer = yield abstractions.OuterContract.deployed();
    let inner = yield abstractions.InnerContract.deployed();

    // run outer contract method
    let result = yield outer.run();

    _chai.assert.equal(2, result.receipt.logs.length, "There should be two logs");

    let txHash = result.tx;

    let bugger = yield _debugger2.default.forTx(txHash, {
      provider,
      contracts: artifacts
    });
    debug("debugger ready");

    let session = bugger.connect();

    let affectedInstances = session.view(_selectors2.default.info.affectedInstances);
    debug("affectedInstances: %o", affectedInstances);

    let affectedAddresses = (0, _keys2.default)(affectedInstances).map(function (address) {
      return address.toLowerCase();
    });

    _chai.assert.equal(2, affectedAddresses.length);

    _chai.assert.include(affectedAddresses, outer.address.toLowerCase(), "OuterContract should be an affected address");

    _chai.assert.include(affectedAddresses, inner.address.toLowerCase(), "InnerContract should be an affected address");
  }));
});

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _entries = __webpack_require__(1);

var _entries2 = _interopRequireDefault(_entries);

var _stringify = __webpack_require__(80);

var _stringify2 = _interopRequireDefault(_stringify);

var _assign = __webpack_require__(4);

var _assign2 = _interopRequireDefault(_assign);

var _extends2 = __webpack_require__(3);

var _extends3 = _interopRequireDefault(_extends2);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _faker = __webpack_require__(81);

var _faker2 = _interopRequireDefault(_faker);

var _selectors = __webpack_require__(2);

var _selectors2 = _interopRequireDefault(_selectors);

var _helpers = __webpack_require__(36);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("test:data:decode");

const uints = (0, _helpers.generateUints)();

function generateArray(length) {
  return [...Array(length)].map(() => uints.next().value);
}

const commonFixtures = [{
  name: "multipleFullWordArray",
  type: "uint[]",
  value: generateArray(3) // takes up 3 whole words
}, {
  name: "withinWordArray",
  type: "uint16[]",
  value: generateArray(10) // takes up >1/2 word
}, {
  name: "multiplePartWordArray",
  type: "uint64[]",
  value: generateArray(9) // takes up 2.25 words
}, {
  name: "inconvenientlyWordOffsetArray",
  type: "uint240[]",
  value: generateArray(3) // takes up ~2.8 words
}, {
  name: "shortString",
  type: "string",
  value: "hello world"
}, {
  name: "longString",
  type: "string",
  value: "solidity allocation is a fun lesson in endianness"
}];

const mappingFixtures = [{
  // name: "simpleMapping",
  // type: {
  //   from: "uint256",
  //   to: "uint256"
  // },
  // value: {
  //   ...Object.assign({}, ...generateArray(5).map(
  //     (value, idx) => ({ [idx]: value })
  //   ))
  // }
  // }, {
  // name: "numberedStrings",
  // type: {
  //   from: "uint256",
  //   to: "string"
  // },
  // value: {
  //   ...Object.assign({}, ...generateArray(7).map(
  //     (value, idx) => ({ [value]: faker.lorem.slug(idx) })
  //   ))
  // }
  // }, {
  name: "stringsToStrings",
  type: {
    from: "string",
    to: "string"
  },
  value: (0, _extends3.default)({}, (0, _assign2.default)({}, ...[0, 1, 2, 3, 4].map(idx => ({ [_faker2.default.lorem.slug(idx)]: _faker2.default.lorem.slug(idx) }))))
}];

debug("mappingFixtures %O", mappingFixtures);

describe("Decoding", function () {

  /*
   * Storage Tests
   */
  (0, _helpers.describeDecoding)("Storage Variables", commonFixtures, _selectors2.default.current.state.storage, (contractName, fixtures) => {
    return `pragma solidity ^0.4.23;

contract ${contractName} {

  event Done();

  // declarations
  ${fixtures.map(({ type, name }) => `${type} ${name};`).join("\n  ")}

  function run() public {
    ${fixtures.map(({ name, value }) => `${name} = ${(0, _stringify2.default)(value)};`).join("\n    ")}

    emit Done();
  }
}
`;
  });

  (0, _helpers.describeDecoding)("Mapping Variables", mappingFixtures, _selectors2.default.current.state.storage, (contractName, fixtures) => {
    return `pragma solidity ^0.4.24;

contract ${contractName} {
  event Done();

  // declarations
  ${fixtures.map(({ name, type: { from, to } }) => `mapping (${from} => ${to}) ${name};`).join("\n  ")}

  function run() public {
    ${fixtures.map(({ name, type: { from }, value }) => (0, _entries2.default)(value).map(([k, v]) => from === "string" ? `${name}["${k}"] = ${(0, _stringify2.default)(v)};` : `${name}[${k}] = ${(0, _stringify2.default)(v)};`).join("\n    ")).join("\n\n    ")}

    emit Done();
  }
}
`;
  });

  /*
   * Memory Tests
   */
  (0, _helpers.describeDecoding)("Memory Variables", commonFixtures, _selectors2.default.current.state.memory, (contractName, fixtures) => {
    const separator = ";\n    ";

    function declareAssign({ name, type, value }) {
      if (type.indexOf("[]") != -1) {
        // array, must `new`
        let declare = `${type} memory ${name} = new ${type}(${value.length})`;
        let assigns = value.map((k, i) => `${name}[${i}] = ${k}`);
        return `${declare}${separator}${assigns.join(separator)}`;
      } else {
        return `${type} memory ${name} = ${(0, _stringify2.default)(value)}`;
      }
    }

    return `pragma solidity ^0.4.23;

contract ${contractName} {

  event Done();

  function run() public {
    uint i;
    // declarations
    ${fixtures.map(declareAssign).join(separator)};

    emit Done();
  }
}
`;
  });
});

/***/ }),
/* 80 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/json/stringify");

/***/ }),
/* 81 */
/***/ (function(module, exports) {

module.exports = require("faker");

/***/ }),
/* 82 */
/***/ (function(module, exports) {

module.exports = require("change-case");

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _chai = __webpack_require__(12);

var _bignumber = __webpack_require__(20);

var _utils = __webpack_require__(11);

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("test:data:decode:utils");

describe("Utils", function () {
  describe("typeClass()", function () {
    it("handles mappings", function () {
      let definition = {
        typeDescriptions: {
          typeIdentifier: "t_mapping$_t_uint256_$_t_uint256_$"
        }
      };

      _chai.assert.equal(utils.typeClass(definition), "mapping");
    });
  });

  describe("toBigNumber()", function () {
    it("returns correct value", function () {
      let bytes = [0xf5, 0xe2, 0xc5, 0x17];
      let expectedValue = new _bignumber.BigNumber("f5e2c517", 16);

      let result = utils.toBigNumber(bytes);

      _chai.assert.equal(result.toString(), expectedValue.toString());
    });
  });

  describe("toSignedBigNumber()", function () {
    it("returns correct negative value", function () {
      let bytes = [0xf5, 0xe2, 0xc5, 0x17]; // starts with 0b1
      let raw = new _bignumber.BigNumber("f5e2c517", 16);
      let bitfipped = new _bignumber.BigNumber(raw.toString(2).replace(/0/g, "x").replace(/1/g, "0").replace(/x/g, "1"), 2);

      let expectedValue = bitfipped.plus(1).negated();

      let result = utils.toSignedBigNumber(bytes);

      _chai.assert.equal(result.toString(), expectedValue.toString());
    });

    it("returns correct positive value", function () {
      let bytes = [0x05, 0xe2, 0xc5, 0x17]; // starts with 0b0
      let raw = new _bignumber.BigNumber("05e2c517", 16);
      let expectedValue = raw;

      let result = utils.toSignedBigNumber(bytes);

      _chai.assert.equal(result.toString(), expectedValue.toString());
    });
  });

  describe("toHexString()", function () {
    it("returns correct representation with full bytes", function () {
      // ie, 0x00 instead of 0x0
      _chai.assert.equal(utils.toHexString([0x05, 0x11]), "0x0511");
      _chai.assert.equal(utils.toHexString([0xff, 0x00, 0xff]), "0xff00ff");
    });

    it("allows removing leading zeroes", function () {
      _chai.assert.equal(utils.toHexString([0x00, 0x00, 0xcc], true), "0xcc");
    });
  });
});

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _asyncToGenerator2 = __webpack_require__(7);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _chai = __webpack_require__(12);

var _ganacheCli = __webpack_require__(16);

var _ganacheCli2 = _interopRequireDefault(_ganacheCli);

var _web = __webpack_require__(8);

var _web2 = _interopRequireDefault(_web);

var _helpers = __webpack_require__(13);

var _debugger = __webpack_require__(18);

var _debugger2 = _interopRequireDefault(_debugger);

var _selectors = __webpack_require__(2);

var _selectors2 = _interopRequireDefault(_selectors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("test:solidity");

const __OUTER = `
pragma solidity ^0.4.18;

import "./Inner.sol";

contract Outer {
  event Called();

  Inner inner;

  function Outer(address _inner) {
    inner = Inner(_inner);
  }

  function runSingle() public {
  }

  function run() public {
    inner.run();
  }
}
`;

const __INNER = `
pragma solidity ^0.4.18;

contract Inner {
  function run() public {
  }
}
`;

const __MIGRATION = `
let Outer = artifacts.require("Outer");
let Inner = artifacts.require("Inner");

module.exports = function(deployer) {
  return deployer
    .then(function() {
      return deployer.deploy(Inner);
    })
    .then(function() {
      return Inner.deployed();
    })
    .then(function(inner) {
      return deployer.deploy(Outer, inner.address);
    });
};
`;

let sources = {
  "Inner.sol": __INNER,
  "Outer.sol": __OUTER
};

let migrations = {
  "2_deploy_contracts.js": __MIGRATION
};

describe("EVM Debugging", function () {
  var provider;
  var web3;

  var abstractions;
  var artifacts;
  var files;

  before("Create Provider", (0, _asyncToGenerator3.default)(function* () {
    provider = _ganacheCli2.default.provider({ seed: "debugger", gasLimit: 7000000 });
    web3 = new _web2.default(provider);
  }));

  before("Prepare contracts and artifacts", (0, _asyncToGenerator3.default)(function* () {
    this.timeout(30000);

    let prepared = yield (0, _helpers.prepareContracts)(provider, sources, migrations);
    abstractions = prepared.abstractions;
    artifacts = prepared.artifacts;
    files = prepared.files;
  }));

  describe("Function Depth", function () {
    it("remains at 1 in absence of cross-contract calls", (0, _asyncToGenerator3.default)(function* () {
      const maxExpected = 1;

      let instance = yield abstractions.Inner.deployed();
      let receipt = yield instance.run();
      let txHash = receipt.tx;

      let bugger = yield _debugger2.default.forTx(txHash, {
        provider,
        files,
        contracts: artifacts
      });

      let session = bugger.connect();
      var stepped; // session steppers return false when done

      do {
        stepped = session.stepNext();

        let actual = session.view(_selectors2.default.current.callstack).length;

        _chai.assert.isAtMost(actual, maxExpected);
      } while (stepped);
    }));

    it("tracks callstack correctly", (0, _asyncToGenerator3.default)(function* () {
      // prepare
      let instance = yield abstractions.Outer.deployed();
      let receipt = yield instance.run();
      let txHash = receipt.tx;

      let bugger = yield _debugger2.default.forTx(txHash, {
        provider,
        files,
        contracts: artifacts
      });

      let session = bugger.connect();

      // follow callstack length values in list
      // see source above
      let expectedDepthSequence = [1, 2, 1, 0];
      let actualSequence = [session.view(_selectors2.default.current.callstack).length];

      var stepped;

      do {
        stepped = session.stepNext();

        let currentDepth = session.view(_selectors2.default.current.callstack).length;
        let lastKnown = actualSequence[actualSequence.length - 1];

        if (currentDepth !== lastKnown) {
          actualSequence.push(currentDepth);
        }
      } while (stepped);

      _chai.assert.deepEqual(actualSequence, expectedDepthSequence);
    }));
  });
});

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _asyncToGenerator2 = __webpack_require__(7);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _chai = __webpack_require__(12);

var _ganacheCli = __webpack_require__(16);

var _ganacheCli2 = _interopRequireDefault(_ganacheCli);

var _web = __webpack_require__(8);

var _web2 = _interopRequireDefault(_web);

var _helpers = __webpack_require__(13);

var _debugger = __webpack_require__(18);

var _debugger2 = _interopRequireDefault(_debugger);

var _selectors = __webpack_require__(6);

var _selectors2 = _interopRequireDefault(_selectors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("test:solidity");

const __SINGLE_CALL = `
pragma solidity ^0.4.18;

contract SingleCall {
  event Called();

  function run() public {
    Called();
  }
}
`;

const __NESTED_CALL = `pragma solidity ^0.4.18;

contract NestedCall {
  event First();
  event Second();

  // run()
  //   first()    1
  //     inner()  2
  //       event  3
  //              2
  //   second     1
  //     event    2
  //              1
  function run() public {
    first();
    second();
  }

  function first() public {
    inner();
  }

  function inner() public {
    First();
  }

  function second() public {
    Second();
  }

}
`;

let sources = {
  "SingleCall.sol": __SINGLE_CALL,
  "NestedCall.sol": __NESTED_CALL
};

describe("Solidity Debugging", function () {
  var provider;
  var web3;

  var abstractions;
  var artifacts;
  var files;

  before("Create Provider", (0, _asyncToGenerator3.default)(function* () {
    provider = _ganacheCli2.default.provider({ seed: "debugger", gasLimit: 7000000 });
    web3 = new _web2.default(provider);
  }));

  before("Prepare contracts and artifacts", (0, _asyncToGenerator3.default)(function* () {
    this.timeout(30000);

    let prepared = yield (0, _helpers.prepareContracts)(provider, sources);
    abstractions = prepared.abstractions;
    artifacts = prepared.artifacts;
    files = prepared.files;
  }));

  it("exposes functionality to stop at breakpoints", (0, _asyncToGenerator3.default)(function* () {
    // prepare
    let instance = yield abstractions.NestedCall.deployed();
    let receipt = yield instance.run();
    let txHash = receipt.tx;

    let bugger = yield _debugger2.default.forTx(txHash, {
      provider,
      files,
      contracts: artifacts
    });

    let session = bugger.connect();

    // at `second();`
    let breakpoint = { "address": instance.address, line: 16 };
    let breakpointStopped = false;

    do {
      session.continueUntil(breakpoint);

      if (!session.finished) {
        let range = yield session.view(_selectors2.default.current.sourceRange);
        _chai.assert.equal(range.lines.start.line, 16);

        breakpointStopped = true;
      }
    } while (!session.finished);
  }));

  describe("Function Depth", function () {
    it("remains at 1 in absence of inner function calls", (0, _asyncToGenerator3.default)(function* () {
      const maxExpected = 1;

      let instance = yield abstractions.SingleCall.deployed();
      let receipt = yield instance.run();
      let txHash = receipt.tx;

      let bugger = yield _debugger2.default.forTx(txHash, {
        provider,
        files,
        contracts: artifacts
      });

      let session = bugger.connect();
      var stepped; // session steppers return false when done

      do {
        stepped = session.stepNext();

        let actual = session.view(_selectors2.default.current.functionDepth);

        _chai.assert.isAtMost(actual, maxExpected);
      } while (stepped);
    }));

    it("spelunks correctly", (0, _asyncToGenerator3.default)(function* () {
      // prepare
      let instance = yield abstractions.NestedCall.deployed();
      let receipt = yield instance.run();
      let txHash = receipt.tx;

      let bugger = yield _debugger2.default.forTx(txHash, {
        provider,
        files,
        contracts: artifacts
      });

      let session = bugger.connect();

      // follow functionDepth values in list
      // see source above
      let expectedDepthSequence = [1, 2, 3, 2, 1, 2, 1, 0];
      let actualSequence = [session.view(_selectors2.default.current.functionDepth)];

      var stepped;

      do {
        stepped = session.stepNext();

        let currentDepth = session.view(_selectors2.default.current.functionDepth);
        let lastKnown = actualSequence[actualSequence.length - 1];

        if (currentDepth !== lastKnown) {
          actualSequence.push(currentDepth);
        }
      } while (stepped);

      _chai.assert.deepEqual(actualSequence, expectedDepthSequence);
    }));
  });
});

/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,